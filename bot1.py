#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
CyberHub Academy Bot v36.0
======================================================
Versi√≥n final con un sistema de verificaci√≥n de respuestas flexible y conceptual.
Incluye el curr√≠culum masivo de 90 lecciones y todas las herramientas y funciones
administrativas en un √∫nico archivo estable y completo.
by: Alvaro
"""

# --- Dependencias (Aseg√∫rate de instalarlas) ---
# pip install python-telegram-bot==21.0.1 requests==2.32.3 dnspython==2.6.1

import json
import os
import logging
import hashlib
import urllib.parse
import requests
import re
import random
import math
import base64
import dns.resolver
import socket
from functools import wraps
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from telegram.constants import ParseMode, ChatAction
import asyncio
from dotenv import load_dotenv

# --- Logging ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.FileHandler("cyber_academy_intelligent.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

load_dotenv('configs.env')

# --- Configuraci√≥n ---
TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
ADMIN_USERNAME = os.getenv("@alvarito_y")
DB_FILE = 'cyberhub_data_intelligent.json'

# --- Constantes ---
PRACTICES_PER_PAGE = 5
LEADERBOARD_SIZE = 10
POINTS_PER_PRACTICE = 10
POINTS_PER_CTF = 50
MAINTENANCE_MESSAGE = "üõ†Ô∏è El bot est√° en mantenimiento. Int√©ntalo m√°s tarde."
COMMON_PORTS = [21, 22, 23, 25, 53, 80, 110, 143, 443, 445, 3306, 3389, 5900, 8080, 8443]

# --- Estados ---
(AWAITING_PRACTICE_ANSWER, RECEIVE_USER_ID, RECEIVE_BROADCAST_MESSAGE, AWAITING_FEEDBACK,
 ADD_LESSON_LEVEL, ADD_LESSON_ID, ADD_LESSON_TITLE, ADD_LESSON_THEORY, ADD_LESSON_PRACTICE, ADD_LESSON_ANSWER,
 SET_CTF_PRACTICE, SET_CTF_ANSWER
) = range(12)

# --- Frases ---
MOTIVATIONAL_QUOTES = [
    "El conocimiento es poder. Sigue aprendiendo, sigue hackeando.", "Piensa como un adversario. Vive como un defensor.",
    "Cada l√≠nea de c√≥digo que lees es una nueva puerta que abres.", "La curiosidad no mat√≥ al gato, lo convirti√≥ en un pentester.",
]

# --- Planes VIP con Precios ---
VIP_PLANS = {
    "semanal": {"price": 7, "days": 7, "name": "Semanal"},
    "mensual": {"price": 15, "days": 30, "name": "Mensual"},
    "trimestral": {"price": 30, "days": 90, "name": "Trimestral"},
    "vitalicio": {"price": 70, "days": 9999, "name": "Vitalicio"}
}

# --- Curso Base ---
def generate_lessons(prefix, count):
    return [f"{prefix}{i}" for i in range(1, count + 1)]

BASE_COURSE_STRUCTURE = {
    "basico": {"name": "Nivel B√°sico", "emoji": "üî∞", "lessons": generate_lessons('b', 30)},
    "medio": {"name": "Nivel Medio", "emoji": "üêç", "lessons": generate_lessons('m', 30)},
    "pro": {"name": "Nivel Pro", "emoji": "üí•", "lessons": generate_lessons('p', 30)}
}

# --- Contenido de Lecciones (90 Lecciones COMPLETAS INTEGRADAS) ---
def create_full_content_hub():
    content = {}
    # Genera placeholders para asegurar que todos los IDs existan
    for prefix in ['b', 'm', 'p']:
        for i in range(1, 31):
            content[f'{prefix}{i}'] = {
                "title": f"Lecci√≥n {prefix.upper()}{i}: Placeholder",
                "theory": "Contenido pendiente.",
                "practice": "Pr√°ctica pendiente.",
                "answer": ["placeholder"]
            }

# --- Contenido de Lecciones ---
BASE_CONTENT_HUB = {
  "b1": { "title": "B1: OSINT - Recolecci√≥n Pasiva", "theory": "El <b>Open Source Intelligence (OSINT)</b> es la primera y m√°s crucial fase de cualquier operaci√≥n de ciberseguridad. Consiste en recolectar informaci√≥n sobre un objetivo utilizando √∫nicamente fuentes de acceso p√∫blico. Esto significa que no interactuamos directamente con la infraestructura del objetivo, lo que hace que esta fase sea completamente sigilosa.\n\nUna de las t√©cnicas m√°s b√°sicas es el an√°lisis de dominios. Cada dominio en internet tiene un registro p√∫blico llamado <b>WHOIS</b>, que puede revelar qui√©n es el propietario del dominio, su informaci√≥n de contacto, las fechas de registro y expiraci√≥n, y, lo m√°s importante, los <b>servidores de nombres (NS)</b>.", "practice": "<b>Pr√°ctica:</b> El dominio de la NASA es `nasa.gov`. Usa la herramienta <code>/whois nasa.gov</code>. Responde con el nombre del <b>Registrar</b>.", "answer": ["general services administration", "gsa"] },
  "b2": { "title": "B2: Enumeraci√≥n de Subdominios", "theory": "Tras conocer un dominio, buscamos sus <b>subdominios</b> (ej: `mail.tesla.com`). Cada subdominio es un nuevo posible punto de entrada. Una t√©cnica efectiva es consultar bases de datos de <b>Transparencia de Certificados (Certificate Transparency)</b>, que registran p√∫blicamente cada certificado SSL/TLS emitido. El comando <code>/subdomains</code> utiliza esta t√©cnica.", "practice": "<b>Pr√°ctica:</b> El dominio de Harvard es `harvard.edu`. Usa <code>/subdomains harvard.edu</code>. Entre los resultados, encontrar√°s el subdominio de su escuela de negocios. Responde con el nombre completo de ese subdominio.", "answer": ["hbr.org"] },
  "b3": { "title": "B3: DNS - El Mapa de Internet", "theory": "El <b>DNS</b> traduce nombres de dominio a direcciones IP. Para un pentester, es un mapa. Registros clave: <b>A</b> (dominio a IPv4), <b>MX</b> (servidores de correo), y <b>TXT</b> (texto arbitrario, a menudo para registros de seguridad como SPF).", "practice": "<b>Pr√°ctica:</b> Usa <code>/dns mx gmail.com</code>. Uno de los servidores tiene la prioridad m√°s alta (n√∫mero m√°s bajo). Responde con el nombre de ese servidor.", "answer": ["gmail-smtp-in.l.google.com"] },
  "b4": { "title": "B4: Escaneo de Puertos", "theory": "Si las IPs son edificios, los <b>puertos</b> son sus puertas. Un <b>escaneo de puertos</b> es un reconocimiento <b>activo</b> que consiste en 'llamar' a estas puertas para ver cu√°les est√°n abiertas. Un puerto abierto indica un servicio escuchando (ej: 22 para SSH, 80 para web), y cada servicio es un potencial punto de entrada.", "practice": "<b>Pr√°ctica:</b> `scanme.nmap.org` es un sitio para practicar. Usa <code>/portscan scanme.nmap.org</code>. Responde con el nombre del servicio que corre en el <b>puerto 22</b>.", "answer": ["ssh"] },
  "b5": { "title": "B5: Hashing", "theory": "El <b>hashing</b> es la huella digital de los datos. Propiedades: determinista, eficiente, resistente a preim√°genes (one-way) y a colisiones. Se usa para verificar la integridad de archivos y almacenar contrase√±as. Algoritmos comunes: <b>MD5</b> (inseguro para claves), <b>SHA-1</b> (debilitado) y <b>SHA-256</b> (est√°ndar).", "practice": "<b>Pr√°ctica:</b> Si el hash de un archivo descargado no coincide con el publicado en la web, ¬øqu√© pilar de la tr√≠ada CIA ha sido violado?", "answer": ["integridad"] },
  "b6": { "title": "B6: Codificaci√≥n Base64", "theory": "La <b>codificaci√≥n</b> no es <b>cifrado</b>. El cifrado oculta informaci√≥n, la codificaci√≥n la transforma a un formato est√°ndar. <b>Base64</b> representa datos binarios en texto ASCII. Si ves una cadena larga que termina con <code>=</code> o <code>==</code>, probablemente sea Base64.", "practice": "<b>Pr√°ctica:</b> Un comentario en una web dice: `Clave API: Q3liZXJIdWJBY2FkZW15`. Usa <code>/base64 dec [texto]</code>. Responde con el texto decodificado.", "answer": ["cyberhubacademy"] },
  "b7": { "title": "B7: Google Dorking", "theory": "<b>Google Dorking</b> usa operadores de b√∫squeda (<code>site:</code>, <code>filetype:</code>, <code>inurl:</code>) para OSINT avanzado, permitiendo encontrar archivos sensibles y vulnerabilidades.", "practice": "<b>Pr√°ctica:</b> Quieres encontrar backups de configuraciones de WordPress, que suelen llamarse `wp-config.php.bak`. Responde con el Google Dork que usar√≠as para encontrar este tipo de archivos.", "answer": [["filetype:bak", "inurl:wp-config.php"]] },
  "b8": { "title": "B8: Cabeceras HTTP", "theory": "Cada comunicaci√≥n web env√≠a <b>cabeceras HTTP</b>. La cabecera <b>`Server`</b> a menudo anuncia el software y versi√≥n del servidor (ej: `Server: Apache/2.4.52`), permitiendo a un atacante buscar vulnerabilidades para esa versi√≥n.", "practice": "<b>Pr√°ctica:</b> Usa <code>/httpheaders github.com</code>. ¬øQu√© valor revela la cabecera `Server`?", "answer": ["github.com"] },
  "b9": { "title": "B9: ¬øQu√© es un CVE?", "theory": "Una <b>vulnerabilidad</b> es una debilidad. Para estandarizarlas, se cre√≥ el sistema <b>Common Vulnerabilities and Exposures (CVE)</b>. Cada una recibe un ID (<code>CVE-A√ëO-N√öMERO</code>) y una puntuaci√≥n de severidad <b>CVSS</b> de 0 a 10.", "practice": "<b>Pr√°ctica:</b> 'Heartbleed' es `CVE-2014-0160`. Usa <code>/cve CVE-2014-0160</code>. Responde con la puntuaci√≥n <b>CVSS</b>.", "answer": ["7.5"] },
  "b10": { "title": "B10: Ingenier√≠a Social", "theory": "La <b>Ingenier√≠a Social</b> es el arte de 'hackear humanos' explotando la psicolog√≠a: confianza, miedo, curiosidad. T√©cnicas incluyen <b>Phishing</b> (correos), <b>Pretexting</b> (escenarios), <b>Baiting</b> (cebos como USBs).", "practice": "<b>Pr√°ctica:</b> Un atacante llama diciendo: 'Hola, soy de soporte t√©cnico. Detectamos un virus y necesitamos control remoto'. ¬øQu√© t√©cnica est√° utilizando?", "answer": ["pretexting", "pretexto"] },
  "b11": { "title": "B11: La L√≠nea de Comandos (CLI)", "theory": "La <b>Command-Line Interface (CLI)</b> es una herramienta esencial. Permite ejecutar comandos directamente y automatizar tareas de forma mucho m√°s potente que con una interfaz gr√°fica.", "practice": "<b>Pr√°ctica:</b> En una terminal Linux, ¬øqu√© comando usar√≠as para ver tu direcci√≥n IP actual?", "answer": ["ifconfig", "ip a"] },
  "b12": { "title": "B12: TCP vs UDP", "theory": "<b>TCP (Transmission Control Protocol)</b> y <b>UDP (User Datagram Protocol)</b> son dos protocolos de transporte. TCP es <b>orientado a conexi√≥n</b> y fiable: garantiza que todos los paquetes lleguen en orden (ej: navegaci√≥n web, email). UDP es <b>no orientado a conexi√≥n</b> y r√°pido: env√≠a paquetes sin garantizar su llegada (ej: streaming de video, juegos online).", "practice": "<b>Pr√°ctica:</b> Si est√°s haciendo una videollamada y la imagen se pixela por un momento pero la llamada no se corta, ¬øqu√© protocolo de transporte es m√°s probable que se est√© usando?", "answer": ["udp"] },
  "b13": { "title": "B13: ¬øQu√© es una Direcci√≥n MAC?", "theory": "La <b>Direcci√≥n MAC (Media Access Control)</b> es un identificador √∫nico de 48 bits asignado a la tarjeta de red de un dispositivo. Opera en la Capa 2 (Enlace de Datos) del modelo OSI y se usa para la comunicaci√≥n dentro de una red local (LAN). Mientras que la IP es como tu direcci√≥n postal (puede cambiar), la MAC es como tu n√∫mero de serie.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© t√©cnica usan los atacantes para cambiar su direcci√≥n MAC y hacerse pasar por otro dispositivo en la red o evadir filtros?", "answer": ["spoofing"] },
  "b14": { "title": "B14: Virtualizaci√≥n", "theory": "La <b>Virtualizaci√≥n</b> permite ejecutar m√∫ltiples sistemas operativos (llamados 'invitados') sobre un √∫nico sistema f√≠sico ('anfitri√≥n'). Software como <b>VirtualBox</b> o <b>VMware</b> crea M√°quinas Virtuales (VMs), que son entornos aislados. Esto es crucial en ciberseguridad para crear laboratorios seguros donde probar malware o exploits sin da√±ar nuestro equipo real.", "practice": "<b>Pr√°ctica:</b> En un entorno de virtualizaci√≥n, ¬øqu√© componente de software es responsable de gestionar y asignar los recursos del hardware f√≠sico (CPU, RAM) a las diferentes m√°quinas virtuales?", "answer": ["hipervisor", "hypervisor"] },
  "b15": { "title": "B15: Tipos de Malware", "theory": "<b>Malware</b> es cualquier software dise√±ado para da√±ar o explotar un sistema. Tipos comunes:\n- <b>Virus:</b> Se adjunta a un programa leg√≠timo y necesita ejecuci√≥n humana.\n- <b>Gusano (Worm):</b> Se autorreplica y propaga a trav√©s de la red sin intervenci√≥n humana.\n- <b>Troyano (Trojan):</b> Se disfraza de software leg√≠timo para enga√±ar al usuario y darle acceso al atacante.\n- <b>Ransomware:</b> Cifra los archivos del usuario y exige un rescate para devolverlos.", "practice": "<b>Pr√°ctica:</b> Un malware se propaga autom√°ticamente de un PC a otro en una red de oficina explotando una vulnerabilidad en Windows, sin que nadie abra ning√∫n archivo. ¬øQu√© tipo de malware es este?", "answer": ["gusano", "worm"] },
  "b16": { "title": "B16: Seguridad de Contrase√±as y 2FA", "theory": "Una contrase√±a fuerte es larga, compleja (may√∫sculas, min√∫sculas, n√∫meros, s√≠mbolos) y √∫nica para cada servicio. Sin embargo, incluso la mejor contrase√±a puede ser robada. La <b>Autenticaci√≥n de Dos Factores (2FA)</b> a√±ade una capa de seguridad extra. Requiere no solo 'algo que sabes' (la contrase√±a), sino tambi√©n 'algo que tienes' (tu tel√©fono con una app de autenticaci√≥n) o 'algo que eres' (tu huella dactilar).", "practice": "<b>Pr√°ctica:</b> Est√°s usando una app como Google Authenticator que genera un c√≥digo de 6 d√≠gitos que cambia cada 30 segundos. ¬øC√≥mo se llama este tipo de contrase√±a de un solo uso basada en el tiempo?", "answer": ["totp"] },
  "b17": { "title": "B17: Cookies y Sesiones Web", "theory": "HTTP es un protocolo 'sin estado', lo que significa que cada petici√≥n es independiente. Para que un sitio web te 'recuerde' entre una p√°gina y otra, utiliza <b>sesiones</b>. Cuando te logueas, el servidor crea una sesi√≥n y te da un identificador √∫nico, que se almacena en tu navegador en un peque√±o archivo de texto llamado <b>cookie</b>. En cada petici√≥n posterior, tu navegador env√≠a la cookie de sesi√≥n para que el servidor sepa qui√©n eres.", "practice": "<b>Pr√°ctica:</b> Si un atacante logra robar tu cookie de sesi√≥n de un sitio web, ¬øqu√© tipo de ataque puede realizar para acceder a tu cuenta sin necesidad de saber tu contrase√±a?", "answer": [["session", "hijacking"], ["secuestro", "sesion"]] },
  "b18": { "title": "B18: El Framework MITRE ATT&CK", "theory": "El <b>MITRE ATT&CK</b> es una base de conocimiento globalmente accesible de t√°cticas y t√©cnicas de adversarios basadas en observaciones del mundo real. A diferencia de los CVEs (que son vulnerabilidades espec√≠ficas), ATT&CK se enfoca en el <b>comportamiento</b> del atacante. Organiza las acciones en una matriz de t√°cticas como 'Acceso Inicial', 'Ejecuci√≥n', 'Persistencia', 'Escalada de Privilegios', etc. Es una herramienta invaluable para los equipos de defensa (Blue Teams) para entender y detectar amenazas.", "practice": "<b>Pr√°ctica:</b> Un atacante utiliza phishing para lograr que un empleado ejecute un archivo malicioso. Seg√∫n la matriz de MITRE ATT&CK, ¬øa qu√© t√°ctica corresponde el phishing?", "answer": [["initial", "access"], ["acceso", "inicial"]] },
  "b19": { "title": "B19: Cifrado Sim√©trico vs Asim√©trico", "theory": "El <b>Cifrado Sim√©trico</b> (ej: AES) utiliza la <b>misma clave</b> para cifrar y descifrar. Es muy r√°pido, pero tiene el problema de c√≥mo compartir la clave de forma segura. El <b>Cifrado Asim√©trico</b> (ej: RSA) utiliza un par de claves: una <b>clave p√∫blica</b> para cifrar y una <b>clave privada</b> para descifrar. La clave p√∫blica se puede compartir con cualquiera. Es m√°s lento, pero resuelve el problema del intercambio de claves.", "practice": "<b>Pr√°ctica:</b> Cuando te conectas a un sitio web con HTTPS, tu navegador y el servidor utilizan un tipo de cifrado para negociar de forma segura una clave de sesi√≥n, que luego usar√°n con otro tipo de cifrado m√°s r√°pido para la comunicaci√≥n. ¬øQu√© tipo de cifrado se usa para el intercambio inicial de claves?", "answer": ["asimetrico"] },
  "b20": { "title": "B20: ¬øQu√© es una API?", "theory": "Una <b>API (Application Programming Interface)</b> es un conjunto de reglas y herramientas que permite que diferentes aplicaciones de software se comuniquen entre s√≠. En el mundo web, las <b>APIs REST</b> son las m√°s comunes. Permiten a un cliente (como una app m√≥vil) solicitar datos de un servidor usando los m√©todos HTTP est√°ndar (GET, POST, PUT, DELETE). Las APIs son un objetivo principal para los atacantes, ya que a menudo procesan datos sensibles y pueden tener vulnerabilidades de seguridad propias.", "practice": "<b>Pr√°ctica:</b> Si una aplicaci√≥n necesita obtener informaci√≥n de un usuario desde una API, ¬øqu√© m√©todo HTTP es el est√°ndar para solicitar/leer datos sin modificarlos?", "answer": ["get"] },
  "b21": { "title": "B21: Linux - Manipulaci√≥n de Texto", "theory": "En ciberseguridad, pasamos mucho tiempo analizando logs y archivos de texto. Linux ofrece herramientas muy potentes para esto: <code>grep</code> para buscar patrones, <code>sed</code> para editar flujos de texto, y <code>awk</code> para procesar datos en columnas. Dominar <code>grep</code> es fundamental. Por ejemplo, <code>grep -i 'error' /var/log/syslog</code> buscar√≠a la palabra 'error' (ignorando may√∫sculas/min√∫sculas) en el log del sistema.", "practice": "<b>Pr√°ctica:</b> Tienes un archivo `access.log` y quieres encontrar todas las peticiones que se hicieron desde la direcci√≥n IP `192.168.1.100`. ¬øQu√© comando usar√≠as?", "answer": ["grep 192.168.1.100 access.log"] },
  "b22": { "title": "B22: Linux - Permisos de Archivos", "theory": "Linux utiliza un sistema de permisos robusto. Cada archivo tiene permisos de <b>Lectura (r)</b>, <b>Escritura (w)</b> y <b>Ejecuci√≥n (x)</b> para tres tipos de entidades: el <b>Usuario</b> propietario, el <b>Grupo</b> propietario y <b>Otros</b>. El comando <code>chmod</code> los modifica. Por ejemplo, <code>chmod 755 script.sh</code> le da todos los permisos (rwx) al usuario, y permisos de lectura y ejecuci√≥n (r-x) al grupo y a otros.", "practice": "<b>Pr√°ctica:</b> Ves un archivo con los permisos <code>-rwxr-xr--</code>. ¬øTienen los 'Otros' (others) permiso para ejecutar este archivo?", "answer": ["no"] },
  "b23": { "title": "B23: ¬øQu√© es una VPN?", "theory": "Una <b>VPN (Virtual Private Network)</b> crea una conexi√≥n segura y cifrada a trav√©s de una red p√∫blica como Internet. Act√∫a como un t√∫nel: todo tu tr√°fico pasa a trav√©s de los servidores de la VPN antes de llegar a su destino final. Esto oculta tu direcci√≥n IP real y cifra tus datos, protegi√©ndote de la vigilancia en redes Wi-Fi p√∫blicas y permiti√©ndote eludir la censura geogr√°fica.", "practice": "<b>Pr√°ctica:</b> ¬øCu√°l es el principal objetivo de seguridad que se logra al cifrar el tr√°fico con una VPN?", "answer": ["confidencialidad"] },
  "b24": { "title": "B24: Cyber Kill Chain", "theory": "La <b>Cyber Kill Chain</b> es un modelo que describe las 7 fases de un ciberataque: 1. Reconocimiento, 2. Armamento, 3. Entrega, 4. Explotaci√≥n, 5. Instalaci√≥n, 6. Comando y Control (C2), 7. Acciones sobre objetivos.", "practice": "<b>Pr√°ctica:</b> Un atacante env√≠a un correo de phishing con un PDF malicioso. ¬øA qu√© fase de la Kill Chain corresponde el env√≠o del correo?", "answer": ["entrega", "delivery"] },
  "b25": { "title": "B25: Red Botnet", "theory": "Una <b>botnet</b> es una red de ordenadores infectados ('zombies') controlados por un atacante ('botmaster') para realizar ataques a gran escala, como <b>DDoS</b>.", "practice": "<b>Pr√°ctica:</b> Si miles de ordenadores env√≠an tr√°fico basura a un servidor hasta que colapsa, ¬øqu√© tipo de ataque est√° llevando a cabo la botnet?", "answer": ["ddos"] },
  "b26": { "title": "B26: Seguridad F√≠sica", "theory": "La <b>seguridad f√≠sica</b> es crucial. Si un atacante accede a una sala de servidores, puede robar discos o instalar hardware malicioso. Medidas como controles de acceso y c√°maras son la primera l√≠nea de defensa.", "practice": "<b>Pr√°ctica:</b> Un atacante se disfraza de t√©cnico y convence al recepcionista para que le deje entrar. ¬øQu√© t√©cnica est√° usando?", "answer": ["ingenieria social"] },
  "b27": { "title": "B27: Hardening de Sistemas", "theory": "El <b>Hardening</b> es el proceso de asegurar un sistema reduciendo su superficie de ataque. Implica deshabilitar servicios innecesarios, aplicar parches y seguir el <b>principio de m√≠nimo privilegio</b>.", "practice": "<b>Pr√°ctica:</b> Un administrador instala un servidor web con FTP y Telnet activos por defecto. Como parte del hardening, ¬øqu√© deber√≠a hacer con estos servicios si no se usan?", "answer": ["deshabilitarlos", "desactivarlos"] },
  "b28": { "title": "B28: Inyecci√≥n de Comandos (OS)", "theory": "La <b>Inyecci√≥n de Comandos</b> ocurre cuando una aplicaci√≥n pasa la entrada del usuario directamente a la shell del sistema operativo sin validarla. Esto permite ejecutar comandos arbitrarios en el servidor.", "practice": "<b>Pr√°ctica:</b> En un sistema Linux vulnerable, ¬øqu√© car√°cter se usa para separar un comando leg√≠timo y 'encadenar' uno malicioso?", "answer": [";"] },
  "b29": { "title": "B29: Cifrado en Reposo vs en Tr√°nsito", "theory": "El <b>cifrado en tr√°nsito</b> protege los datos mientras se mueven por una red (ej: HTTPS). El <b>cifrado en reposo</b> protege los datos cuando est√°n almacenados (ej: BitLocker). Ambos son necesarios.", "practice": "<b>Pr√°ctica:</b> Cuando usas HTTPS para navegar, ¬øqu√© tipo de cifrado se est√° aplicando?", "answer": ["en transito"] },
  "b30": { "title": "B30: Desaf√≠o B√°sico Final", "theory": "Este desaf√≠o combina varias t√©cnicas. El OSINT a menudo implica conectar piezas de informaci√≥n de diferentes fuentes para formar una imagen completa del objetivo.", "practice": "<b>Pr√°ctica:</b> La empresa `megacorpone.com` tiene un servidor de correo. Usa <code>/dns mx megacorpone.com</code> para encontrar su nombre. Luego, usa <code>/portscan</code> en ese nombre. Responde con el n√∫mero del puerto de correo seguro (IMAPS) que est√° abierto.", "answer": ["993"] },
  
  "m1": { "title": "M1: Nmap Avanzado - NSE", "theory": "Nmap no solo escanea puertos. Con el <b>Nmap Scripting Engine (NSE)</b>, puede detectar vulnerabilidades y enumerar servicios. <code>-sC</code> ejecuta scripts por defecto y <code>-sV</code> detecta versiones de servicios.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© combinaci√≥n de flags usar√≠as en Nmap para un escaneo de versiones y ejecutar scripts por defecto?", "answer": ["-sv -sc", "-sc -sv"] },
  "m2": { "title": "M2: An√°lisis de Tr√°fico con Wireshark", "theory": "<b>Wireshark</b> es un analizador de protocolos de red que permite capturar e inspeccionar el tr√°fico en tiempo real. Esencial para analizar malware y entender aplicaciones. Puedes filtrar por protocolo (<code>http</code>), IP (<code>ip.addr == 8.8.8.8</code>) o puerto (<code>tcp.port == 443</code>).", "practice": "<b>Pr√°ctica:</b> En Wireshark, si quieres ver todas las peticiones DNS y sus respuestas, ¬øqu√© filtro de visualizaci√≥n usar√≠as?", "answer": ["dns"] },
  "m3": { "title": "M3: Explotaci√≥n Web con Burp Suite", "theory": "<b>Burp Suite</b> es la navaja suiza para el pentesting de aplicaciones web. Su funci√≥n principal es actuar como un <b>proxy de intercepci√≥n</b>, permiti√©ndote ver y modificar todo el tr√°fico HTTP/S entre tu navegador y el servidor. El m√≥dulo 'Repeater' te permite reenviar y modificar una petici√≥n individual repetidamente para probar diferentes payloads.", "practice": "<b>Pr√°ctica:</b> Quieres probar una vulnerabilidad de Inyecci√≥n SQL en un par√°metro de una URL. ¬øQu√© m√≥dulo de Burp Suite es el m√°s adecuado para enviar la misma petici√≥n muchas veces con peque√±as modificaciones?", "answer": ["repeater"] },
  "m4": { "title": "M4: Inyecci√≥n SQL - UNION-based", "theory": "La <b>Inyecci√≥n SQL basada en UNION</b> es una t√©cnica que aprovecha la sentencia <code>UNION SQL</code> para combinar el resultado de una consulta maliciosa con la consulta leg√≠tima de la aplicaci√≥n. Para que funcione, la consulta maliciosa debe devolver el mismo n√∫mero de columnas que la consulta original. Se usa <code>ORDER BY</code> para adivinar el n√∫mero de columnas.", "practice": "<b>Pr√°ctica:</b> Un atacante inyecta <code>' UNION SELECT NULL, version(), NULL--</code>. ¬øQu√© informaci√≥n est√° intentando extraer de la base de datos?", "answer": ["version"] },
  "m5": { "title": "M5: Cross-Site Scripting (XSS) Almacenado", "theory": "A diferencia del XSS Reflejado, el <b>XSS Almacenado (Stored XSS)</b> es mucho m√°s peligroso. Ocurre cuando un payload malicioso se guarda permanentemente en la base de datos del servidor (ej: en un comentario de un blog, un nombre de perfil). Cada vez que un usuario visita la p√°gina afectada, el script se ejecuta en su navegador. Esto permite al atacante robar las cookies de sesi√≥n de todos los visitantes.", "practice": "<b>Pr√°ctica:</b> Un atacante publica un comentario en un foro con el payload <code>&lt;script src='http://atacante.com/robo.js'&gt;&lt;/script&gt;</code>. ¬øQu√© tipo de ataque XSS est√° realizando?", "answer": ["almacenado", "stored"] },
  "m6": { "title": "M6: Password Cracking con John The Ripper", "theory": "<b>John The Ripper (JTR)</b> es una popular herramienta de cracking de contrase√±as. Puede tomar hashes de contrase√±as (extra√≠dos de archivos como <code>/etc/shadow</code> en Linux) y intentar romperlos usando listas de palabras (diccionarios) o ataques de fuerza bruta. El primer paso es a menudo usar una herramienta como <code>unshadow</code> para combinar los archivos <code>passwd</code> y <code>shadow</code> en un formato que JTR pueda leer.", "practice": "<b>Pr√°ctica:</b> Si JTR logra romper un hash y revela que la contrase√±a es '123456', ¬øqu√© tipo de ataque fue el m√°s probablemente exitoso?", "answer": ["diccionario"] },
  "m7": { "title": "M7: Introducci√≥n a Metasploit", "theory": "El <b>Metasploit Framework</b> es una plataforma de pentesting que simplifica el proceso de explotaci√≥n. Sus componentes clave son:\n- <b>Exploits:</b> C√≥digo que aprovecha una vulnerabilidad espec√≠fica.\n- <b>Payloads:</b> C√≥digo que se ejecuta en el objetivo despu√©s de una explotaci√≥n exitosa (ej: una shell).\n- <b>Modules:</b> Scripts auxiliares para escaneo, enumeraci√≥n, etc.\n- <b>MSFConsole:</b> La interfaz de l√≠nea de comandos para interactuar con el framework.", "practice": "<b>Pr√°ctica:</b> Dentro de <code>msfconsole</code>, ¬øqu√© comando usar√≠as para buscar un exploit relacionado con la vulnerabilidad 'EternalBlue'?", "answer": ["search eternalblue"] },
  "m8": { "title": "M8: Escalada de Privilegios en Linux - SUID", "theory": "La <b>escalada de privilegios</b> es el objetivo despu√©s de obtener acceso inicial. En Linux, una t√©cnica com√∫n es abusar de binarios con el bit <b>SUID (Set User ID)</b> activado. Un archivo con SUID se ejecuta con los permisos del propietario del archivo, no del usuario que lo lanza. Si un binario propiedad de 'root' tiene el bit SUID y una vulnerabilidad, un usuario normal podr√≠a explotarlo para ejecutar comandos como 'root'.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© comando usar√≠as en una terminal Linux para encontrar todos los archivos en el sistema con el permiso SUID activado?", "answer": [["find", "-perm", "-u=s"]] },
  "m9": { "title": "M9: Local File Inclusion (LFI)", "theory": "La <b>Inclusi√≥n Local de Archivos (LFI)</b> es una vulnerabilidad web que permite a un atacante incluir y ejecutar o mostrar archivos del servidor. Ocurre cuando una aplicaci√≥n utiliza la entrada del usuario para construir la ruta a un archivo que ser√° incluido. Por ejemplo, en PHP, <code>include($_GET['pagina']);</code> es vulnerable. Un atacante podr√≠a usar <code>?pagina=../../../../etc/passwd</code> para leer el archivo de usuarios del sistema.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© secuencia de caracteres es fundamental en un payload de LFI para navegar hacia arriba en la estructura de directorios del servidor?", "answer": ["../"] },
  "m10": { "title": "M10: Anatom√≠a de una Shell Inversa", "theory": "Una <b>shell inversa (reverse shell)</b> es un payload donde la m√°quina objetivo se conecta de vuelta a la m√°quina del atacante. Esto es extremadamente √∫til para eludir firewalls, ya que las conexiones salientes suelen estar menos restringidas que las entrantes. El atacante pone un 'listener' (oyente) en su m√°quina (ej: con <code>netcat -lvp 4444</code>) y el payload ejecutado en la v√≠ctima establece una conexi√≥n a la IP y puerto del atacante, d√°ndole control de la terminal.", "practice": "<b>Pr√°ctica:</b> Si un atacante establece un listener en su m√°quina, ¬øqui√©n inicia la conexi√≥n en un escenario de shell inversa: el atacante o la v√≠ctima?", "answer": ["victima"] },
  "m11": { "title": "M11: Cross-Site Request Forgery (CSRF)", "theory": "<b>CSRF</b> es un ataque que obliga a un usuario autenticado a realizar acciones no deseadas en una aplicaci√≥n web. Se previene usando tokens anti-CSRF √∫nicos en cada sesi√≥n o petici√≥n.", "practice": "<b>Pr√°ctica:</b> Si un sitio usa tokens anti-CSRF, ¬ød√≥nde esperar√≠a el servidor recibir ese token para validar una petici√≥n?", "answer": ["formulario", "cabeceras"] },
  "m12": { "title": "M12: XML External Entity (XXE)", "theory": "Los ataques <b>XXE</b> explotan parsers de XML mal configurados. Permiten a un atacante leer archivos locales, realizar peticiones internas (SSRF) o causar DoS.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© entidad sensible intentar√≠a leer un atacante en Linux para ver los usuarios del sistema mediante un ataque XXE?", "answer": ["/etc/passwd"] },
  "m13": { "title": "M13: Hacking de WiFi - WPA2", "theory": "Atacar redes <b>WPA/WPA2-Personal</b> implica capturar el 'handshake' de 4 v√≠as que ocurre cuando un cliente se conecta al punto de acceso. Este handshake contiene informaci√≥n que puede ser crackeada offline con herramientas como Aircrack-ng y una lista de contrase√±as.", "practice": "<b>Pr√°ctica:</b> En un ataque a una red WPA2, ¬øqu√© es lo que se captura y se intenta crackear offline?", "answer": ["handshake"] },
  "m14": { "title": "M14: Evasi√≥n de Firewalls", "theory": "Los firewalls bloquean tr√°fico bas√°ndose en reglas. Las t√©cnicas de evasi√≥n incluyen <b>Fragmentaci√≥n de Paquetes</b> (dividir paquetes para que el firewall no vea el payload completo), <b>Spoofing de IP de Origen</b>, y <b>Tunneling</b> (encapsular un protocolo dentro de otro, como SSH sobre DNS o HTTP).", "practice": "<b>Pr√°ctica:</b> ¬øQu√© t√©cnica de evasi√≥n de firewalls es particularmente efectiva porque el protocolo encapsulado suele estar permitido en todas las redes?", "answer": ["tunneling"] },
  "m15": { "title": "M15: Criptograf√≠a - Esteganograf√≠a", "theory": "La <b>Esteganograf√≠a</b> es el arte de ocultar informaci√≥n dentro de otros archivos (im√°genes, audio, video). A diferencia de la criptograf√≠a, que oculta el contenido del mensaje, la esteganograf√≠a oculta la existencia misma del mensaje. Herramientas como Steghide pueden incrustar y extraer datos secretos de archivos.", "practice": "<b>Pr√°ctica:</b> ¬øCu√°l es el objetivo principal de la esteganograf√≠a?", "answer": ["ocultar la existencia del mensaje"] },
  "m16": { "title": "M16: Escalada de Privilegios en Windows - UAC Bypass", "theory": "El <b>User Account Control (UAC)</b> en Windows es una medida de seguridad que pide confirmaci√≥n antes de realizar acciones que requieran privilegios de administrador. Sin embargo, existen numerosas t√©cnicas de <b>UAC Bypass</b> que explotan la forma en que Windows maneja ciertos procesos de confianza para ejecutar c√≥digo con privilegios elevados sin mostrar el aviso al usuario.", "practice": "<b>Pr√°ctica:</b> Si un exploit logra ejecutar un programa como administrador sin que aparezca la ventana de confirmaci√≥n de UAC, ¬øqu√© ha logrado?", "answer": [["uac", "bypass"]] },
  "m17": { "title": "M17: Pivoting y Movimiento Lateral", "theory": "Una vez que un atacante compromete una m√°quina en una red, rara vez es su objetivo final. El <b>Pivoting</b> es la t√©cnica de usar la m√°quina comprometida como un 'pivote' para atacar otras m√°quinas dentro de la misma red que no son accesibles desde el exterior. Este proceso de moverse de una m√°quina a otra se conoce como <b>Movimiento Lateral</b>.", "practice": "<b>Pr√°ctica:</b> Un atacante compromete un servidor web en la DMZ. Luego, desde ese servidor, lanza un escaneo a la red interna de la empresa. ¬øQu√© t√©cnica est√° utilizando?", "answer": ["pivoting"] },
  "m18": { "title": "M18: Exfiltraci√≥n de Datos", "theory": "La <b>Exfiltraci√≥n de Datos</b> es la fase final de muchos ataques, donde el objetivo es robar informaci√≥n sensible. Los atacantes deben hacerlo de forma sigilosa para no ser detectados. T√©cnicas comunes incluyen comprimir y cifrar los datos, y luego sacarlos de la red a trav√©s de canales que parecen leg√≠timos, como peticiones DNS (DNS Tunneling) o tr√°fico HTTPS a un servidor controlado por el atacante.", "practice": "<b>Pr√°ctica:</b> Un atacante quiere exfiltrar un archivo de 1GB de una red corporativa. ¬øQu√© deber√≠a hacer primero con el archivo para reducir su tama√±o y ocultar su contenido antes de enviarlo?", "answer": ["comprimir", "cifrar"] },
  "m19": { "title": "M19: An√°lisis de Malware - Est√°tico", "theory": "El <b>An√°lisis Est√°tico de Malware</b> consiste en examinar el archivo malicioso sin ejecutarlo. Se utilizan herramientas como <code>strings</code> para extraer texto legible (IPs, URLs, nombres de archivo), desensambladores como IDA Pro o Ghidra para ver el c√≥digo ensamblador, y herramientas como PEview para inspeccionar la estructura del archivo ejecutable de Windows.", "practice": "<b>Pr√°ctica:</b> Si usas el comando <code>strings</code> en un archivo de malware y encuentras la URL <code>http://servidor-c2-malicioso.com/gate.php</code>, ¬øqu√© has descubierto?", "answer": [["servidor", "comando", "control"], ["c2"]] },
  "m20": { "title": "M20: An√°lisis de Malware - Din√°mico", "theory": "El <b>An√°lisis Din√°mico de Malware</b> implica ejecutar el malware en un entorno seguro y controlado (una 'sandbox' o una m√°quina virtual aislada) para observar su comportamiento. Herramientas como Process Monitor (ProcMon) y Wireshark se utilizan para monitorizar qu√© archivos crea, qu√© claves de registro modifica, y con qu√© servidores se comunica en la red.", "practice": "<b>Pr√°ctica:</b> Al ejecutar un malware en una sandbox, notas que intenta conectarse a una direcci√≥n IP en Rusia. ¬øQu√© herramienta te permiti√≥ ver esta actividad de red?", "answer": ["wireshark"] },
  "m21": { "title": "M21: Inyecci√≥n de C√≥digo", "theory": "A diferencia de la inyecci√≥n de comandos, la <b>inyecci√≥n de c√≥digo</b> inserta c√≥digo en un proceso en ejecuci√≥n. T√©cnicas como <b>DLL Injection</b> en Windows cargan una librer√≠a maliciosa en un proceso leg√≠timo (ej. explorer.exe) para ocultar su actividad y heredar sus privilegios.", "practice": "<b>Pr√°ctica:</b> Si un malware inyecta su c√≥digo en `svchost.exe` para realizar peticiones de red, ¬øqu√© objetivo principal persigue?", "answer": ["evasion", "ocultarse"] },
  "m22": { "title": "M22: Enumeraci√≥n de SMB", "theory": "El protocolo <b>SMB (Server Message Block)</b>, puerto 445, es fundamental en redes Windows para compartir archivos e impresoras. Enumerar SMB puede revelar nombres de usuario, recursos compartidos (shares) p√∫blicos y versiones del sistema operativo. Una versi√≥n antigua y sin parches de SMB puede ser vulnerable a exploits como EternalBlue.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© puerto es el est√°ndar para el protocolo SMB?", "answer": ["445"] },
  "m23": { "title": "M23: Ataques de Fuerza Bruta", "theory": "Un ataque de <b>Fuerza Bruta</b> consiste en probar sistem√°ticamente todas las combinaciones posibles de contrase√±as hasta encontrar la correcta. Es un m√©todo lento pero efectivo contra contrase√±as cortas o simples. Servicios como SSH, FTP o RDP son objetivos comunes. Herramientas como <b>Hydra</b> automatizan este proceso.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© medida de seguridad es la m√°s efectiva para mitigar un ataque de fuerza bruta en un formulario de login?", "answer": [["bloqueo", "cuenta"], ["limite", "intentos"]] },
  "m24": { "title": "M24: Vulnerabilidades de Deserializaci√≥n", "theory": "La <b>serializaci√≥n</b> convierte un objeto (datos en memoria) a un formato que puede ser almacenado o transmitido (ej. JSON, XML). La <b>deserializaci√≥n</b> es el proceso inverso. Si una aplicaci√≥n deserializa datos no confiables de un usuario sin validarlos, un atacante puede manipular los datos serializados para ejecutar c√≥digo arbitrario en el servidor.", "practice": "<b>Pr√°ctica:</b> Si una aplicaci√≥n web env√≠a un objeto serializado en una cookie y un atacante lo modifica para ejecutar comandos, ¬øc√≥mo se llama esta vulnerabilidad?", "answer": ["deserializacion insegura"] },
  "m25": { "title": "M25: Criptograf√≠a - Firmas Digitales", "theory": "Una <b>Firma Digital</b>, basada en criptograf√≠a asim√©trica, proporciona <b>autenticidad</b> (prueba qui√©n envi√≥ el mensaje), <b>integridad</b> (prueba que no ha sido modificado) y <b>no repudio</b> (el emisor no puede negar haberlo enviado). Se crea cifrando el hash de un mensaje con la clave privada del emisor. Cualquiera puede verificarla usando la clave p√∫blica del emisor.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© clave se utiliza para <b>crear</b> una firma digital?", "answer": ["privada"] },
  "m26": { "title": "M26: Evasi√≥n de IDS/IPS", "theory": "Los <b>Sistemas de Detecci√≥n/Prevenci√≥n de Intrusos (IDS/IPS)</b> buscan patrones de ataque en el tr√°fico de red. Las t√©cnicas de evasi√≥n incluyen el uso de <b>cifrado</b> (HTTPS), la <b>fragmentaci√≥n de paquetes</b>, y el env√≠o de tr√°fico muy lento (<b>low and slow attack</b>) para pasar por debajo del umbral de detecci√≥n.", "practice": "<b>Pr√°ctica:</b> ¬øPor qu√© el uso masivo de HTTPS en Internet ha complicado la tarea de los IDS/IPS?", "answer": ["cifrado", "trafico cifrado"] },
  "m27": { "title": "M27: Fuzzing", "theory": "El <b>Fuzzing</b> es una t√©cnica de prueba de software automatizada que consiste en enviar datos malformados, inesperados o aleatorios a una aplicaci√≥n para provocar fallos (crashes). Es extremadamente efectivo para encontrar vulnerabilidades de corrupci√≥n de memoria, como los buffer overflows, en aplicaciones que procesan formatos de archivo complejos (PDFs, im√°genes) o protocolos de red.", "practice": "<b>Pr√°ctica:</b> Si quieres encontrar una vulnerabilidad de tipo 'zero-day' en el parser de im√°genes PNG de un navegador, ¬øqu√© t√©cnica de prueba automatizada ser√≠a la m√°s adecuada?", "answer": ["fuzzing"] },
  "m28": { "title": "M28: Threat Intelligence", "theory": "La <b>Inteligencia de Amenazas (Threat Intelligence)</b> es el conocimiento basado en evidencia (contexto, mecanismos, indicadores, implicaciones) sobre una amenaza existente o emergente. Ayuda a las organizaciones a tomar decisiones de seguridad m√°s r√°pidas e informadas. Un <b>Indicador de Compromiso (IoC)</b> es una pieza de evidencia forense, como una IP o un hash de archivo malicioso.", "practice": "<b>Pr√°ctica:</b> El hash de un archivo encontrado en tu red coincide con el de un malware conocido usado por el grupo APT28. ¬øQu√© tipo de artefacto de threat intelligence es este hash?", "answer": ["ioc", "indicador de compromiso"] },
  "m29": { "title": "M29: Scripting con Scapy", "theory": "<b>Scapy</b> es una potente librer√≠a de Python que permite crear, enviar, capturar y analizar paquetes de red. A diferencia de otras herramientas, Scapy te da control total sobre cada campo de los paquetes (IP, TCP, etc.), lo que la hace ideal para crear herramientas de escaneo personalizadas, realizar ataques de red a medida o realizar pruebas de protocolos.", "practice": "<b>Pr√°ctica:</b> Si quieres crear un paquete TCP SYN desde cero en Scapy, ¬øqu√© dos capas (como m√≠nimo) necesitas apilar juntas?", "answer": ["ip", "tcp"] },
  "m30": { "title": "M30: Desaf√≠o Medio Final", "theory": "Este desaf√≠o combina explotaci√≥n web con escalada de privilegios. Debes pensar en cadena, donde el resultado de un paso es la entrada del siguiente.", "practice": "<b>Pr√°ctica:</b> Explotas una LFI en un servidor web y logras leer el archivo <code>/home/user/.bash_history</code>. Dentro, encuentras el comando <code>sudo -l</code>. ¬øQu√© informaci√≥n crucial esperas obtener de este comando para tu siguiente paso?", "answer": [["privilegios", "sudo"], ["comandos", "root"]] },

  "p1": { "title": "P1: Exploit Dev - Buffer Overflow", "theory": "Un <b>Buffer Overflow</b> sobrescribe la pila para controlar el <b>puntero de instrucci√≥n (EIP/RIP)</b>. Un 'NOP sled' es una secuencia de instrucciones 'No Operation' (<code>0x90</code>) que se coloca antes del shellcode para aumentar la probabilidad de que la ejecuci√≥n salte a √©l.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© registro de la CPU es el objetivo a sobrescribir para controlar el flujo de ejecuci√≥n?", "answer": ["eip", "rip"] },
  "p2": { "title": "P2: Metodolog√≠a Red Team", "theory": "Un <b>Red Team</b> simula a un adversario real (APT) para probar las defensas de una organizaci√≥n de forma integral y sigilosa. El objetivo no es solo encontrar vulnerabilidades, sino permanecer sin ser detectado y alcanzar objetivos espec√≠ficos. Fases: Reconocimiento, Acceso Inicial, Persistencia, Escalada de Privilegios, Movimiento Lateral, y Exfiltraci√≥n.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© fase se enfoca en asegurar el acceso a largo plazo a un sistema comprometido?", "answer": ["persistencia"] },
  "p3": { "title": "P3: Cloud Security - S3 Buckets", "theory": "Los <b>Buckets de Amazon S3</b> son un servicio de almacenamiento en la nube. Una mala configuraci√≥n extremadamente com√∫n es dejarlos p√∫blicos, exponiendo gigabytes o terabytes de datos sensibles a cualquiera en Internet. Herramientas como la CLI de AWS (<code>aws s3 ls s3://nombre-del-bucket</code>) pueden usarse para explorar estos buckets mal configurados.", "practice": "<b>Pr√°ctica:</b> Si encuentras un bucket S3 p√∫blico, ¬øqu√© tipo de permiso mal configurado es el responsable m√°s probable de la exposici√≥n de datos?", "answer": [["lectura", "publica"], ["acceso", "publico"]] },
  "p4": { "title": "P4: Server-Side Request Forgery (SSRF)", "theory": "En un ataque de <b>Falsificaci√≥n de Peticiones del Lado del Servidor (SSRF)</b>, un atacante abusa de una funcionalidad de un servidor para que este realice peticiones a otros recursos en su nombre. Esto puede usarse para escanear la red interna, interactuar con servicios internos no expuestos a Internet, o consultar metadatos de proveedores de la nube (como la instancia de metadatos de AWS en <code>169.254.169.254</code>).", "practice": "<b>Pr√°ctica:</b> Un atacante explota una vulnerabilidad SSRF en un servidor alojado en AWS. ¬øA qu√© direcci√≥n IP interna especial intentar√≠a acceder para robar credenciales de la instancia?", "answer": ["169.254.169.254"] },
  "p5": { "title": "P5: Bypassing Antivirus", "theory": "La evasi√≥n de antivirus es un juego del gato y el rat√≥n. Las defensas basadas en <b>firmas</b> buscan hashes de malware conocido. Para evadir esto, los atacantes usan <b>empaquetadores (packers)</b> y <b>criptores</b> para cambiar la firma del archivo. Las defensas basadas en <b>heur√≠stica</b> analizan el comportamiento del c√≥digo, que se evade con t√©cnicas de ofuscaci√≥n y polimorfismo que hacen que el c√≥digo malicioso parezca benigno.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© t√©cnica consiste en cifrar el payload malicioso y usar un peque√±o 'stub' (c√≥digo de arranque) para descifrarlo y ejecutarlo solo en memoria, evadiendo as√≠ el escaneo est√°tico de archivos?", "answer": ["empaquetado", "packer", "criptor"] },
  "p6": { "title": "P6: Active Directory - Kerberoasting", "theory": "En redes de Windows con <b>Active Directory</b>, el <b>Kerberoasting</b> es un ataque de post-explotaci√≥n. Un atacante con acceso a la red solicita tickets de servicio (TGS) para cuentas de usuario que est√°n asociadas a un SPN (Service Principal Name). El TGS est√° cifrado con el hash de la contrase√±a de esa cuenta de servicio. El atacante puede llevarse este ticket y intentar crackearlo offline para obtener la contrase√±a en texto plano, a menudo de cuentas con altos privilegios.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© se necesita crackear offline en un ataque de Kerberoasting para obtener la contrase√±a de una cuenta de servicio?", "answer": [["ticket", "servicio"], "tgs"] },
  "p7": { "title": "P7: Persistencia en Windows - Run Keys", "theory": "La <b>persistencia</b> es la t√©cnica para mantener el acceso a un sistema comprometido. En Windows, una de las formas m√°s simples y efectivas es a√±adir una entrada en las <b>claves de registro 'Run'</b>. Hay varias ubicaciones (<code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code> y su equivalente en HKLM). Cualquier programa listado en estas claves se ejecutar√° autom√°ticamente cada vez que el usuario inicie sesi√≥n, permitiendo que el malware se reactive.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© herramienta de l√≠nea de comandos de Windows usar√≠as para modificar directamente el registro y a√±adir una clave de persistencia?", "answer": ["reg", "reg.exe"] },
  "p8": { "title": "P8: C2 Frameworks (Comando y Control)", "theory": "Los <b>frameworks de Comando y Control (C2 o C&C)</b> son la infraestructura que los atacantes y Red Teams usan para gestionar remotamente los sistemas comprometidos. Un 'implante' o 'beacon' en la v√≠ctima se conecta peri√≥dicamente al servidor C2 del atacante para recibir tareas y enviar resultados. Las comunicaciones C2 a menudo se camuflan dentro de tr√°fico leg√≠timo como DNS (DNS Tunneling) o HTTP/S para evadir la detecci√≥n.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© t√©cnica de comunicaci√≥n C2 es particularmente sigilosa porque se mezcla con el tr√°fico web cifrado que es omnipresente en las redes corporativas?", "answer": ["https"] },
  "p9": { "title": "P9: Introducci√≥n a la Forense Digital", "theory": "La <b>forense digital</b> es la ciencia de recuperar y analizar evidencia de dispositivos digitales. Un principio clave es el <b>orden de volatilidad</b>. Al investigar un sistema, se deben recolectar los datos m√°s vol√°tiles primero, ya que son los que se pierden m√°s r√°pidamente. La jerarqu√≠a suele ser: Registros de la CPU/cach√© -> Memoria RAM -> Datos de la red -> Disco duro -> Backups.", "practice": "<b>Pr√°ctica:</b> Durante la respuesta a un incidente, un analista tiene un ordenador encendido que se sospecha est√° comprometido. Seg√∫n el orden de volatilidad, ¬øqu√© deber√≠a hacer primero: una copia del disco duro o un volcado de la memoria RAM?", "answer": [["volcado", "ram"], ["memoria", "ram"]] },
  "p10": { "title": "P10: Decodificando JWTs", "theory": "Los <b>JSON Web Tokens (JWT)</b> se usan para autenticaci√≥n. Constan de 3 partes separadas por puntos: Header, Payload y Signature. Las dos primeras son simplemente objetos JSON codificados en Base64Url. Decodificarlas puede revelar informaci√≥n sobre el usuario y los permisos, aunque no valida la autenticidad del token.", "practice": "<b>Pr√°ctica:</b> Usa la herramienta <code>/jwt_decode</code> con el token `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJyb2xlIjoiYWRtaW4ifQ.qdidZ_4gQNP5I3iPigha-2002j_S3QmBCgsJp0aGY8A`. ¬øCu√°l es el valor del campo 'role' en el payload?", "answer": ["admin"] },
  "p11": { "title": "P11: Reversing - Desensambladores vs Decompiladores", "theory": "Un <b>desensamblador</b> (como objdump) traduce el c√≥digo m√°quina a lenguaje ensamblador, que es legible pero de muy bajo nivel. Un <b>decompilador</b> (como Ghidra) va un paso m√°s all√° e intenta revertir el ensamblador a un lenguaje de alto nivel como C, lo que facilita enormemente el an√°lisis del programa.", "practice": "<b>Pr√°ctica:</b> Para entender r√°pidamente la l√≥gica de un programa complejo sin analizar cada instrucci√≥n de bajo nivel, ¬øqu√© herramienta ser√≠a m√°s √∫til: un desensamblador o un decompilador?", "answer": ["decompilador"] },
  "p12": { "title": "P12: Exploit Dev - ROP Chains", "theory": "Las defensas modernas como <b>DEP (Data Execution Prevention)</b> impiden la ejecuci√≥n de c√≥digo en la pila. Para eludir esto, los atacantes usan <b>Return-Oriented Programming (ROP)</b>. En lugar de inyectar su propio shellcode, reutilizan peque√±os fragmentos de c√≥digo existentes en el programa (llamados 'gadgets') que terminan en una instrucci√≥n `ret`. Encadenando estos gadgets, pueden ejecutar operaciones complejas sin introducir nuevo c√≥digo ejecutable.", "practice": "<b>Pr√°ctica:</b> ¬øCu√°l es la principal defensa a nivel de sistema operativo que la t√©cnica de ROP est√° dise√±ada para eludir?", "answer": ["dep", "data execution prevention"] },
  "p13": { "title": "P13: Evasi√≥n de Defensas - Sandboxing", "theory": "Las <b>sandboxes</b> son entornos aislados donde se ejecuta malware para analizar su comportamiento. El malware avanzado a menudo incluye t√©cnicas de <b>evasi√≥n de sandbox</b>. Puede buscar artefactos t√≠picos de una VM (drivers de VirtualBox, direcciones MAC espec√≠ficas), comprobar la interacci√≥n del usuario (movimiento del rat√≥n) o simplemente permanecer inactivo por un tiempo (sleep) para evitar la detecci√≥n automatizada.", "practice": "<b>Pr√°ctica:</b> Un malware se ejecuta, pero no hace nada malicioso durante los primeros 10 minutos. ¬øQu√© t√©cnica de evasi√≥n podr√≠a estar utilizando?", "answer": ["sleep", "dormir", "retraso"] },
  "p14": { "title": "P14: Movimiento Lateral - Pass the Hash", "theory": "En redes Windows, <b>Pass the Hash (PtH)</b> es una t√©cnica de movimiento lateral que permite a un atacante autenticarse en un sistema remoto sin necesidad de crackear la contrase√±a. Si el atacante obtiene el hash NTLM de la contrase√±a de un usuario, puede usar herramientas como Mimikatz para pasar directamente ese hash al servicio de autenticaci√≥n y acceder a otros sistemas donde ese usuario tenga permisos.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© herramienta es la m√°s famosa y utilizada para ejecutar ataques de Pass the Hash en Windows?", "answer": ["mimikatz"] },
  "p15": { "title": "P15: Blue Team - Detecci√≥n de Amenazas", "theory": "Un <b>Blue Team</b> es responsable de la defensa de una organizaci√≥n. La <b>Detecci√≥n de Amenazas (Threat Hunting)</b> es una actividad proactiva donde los analistas buscan en sus redes y sistemas evidencia de compromiso que no ha sido detectada por las herramientas automatizadas. Se basan en hip√≥tesis (ej. '¬øY si un atacante est√° usando PowerShell para movimiento lateral?') y buscan IoCs y TTPs (T√°cticas, T√©cnicas y Procedimientos) de adversarios.", "practice": "<b>Pr√°ctica:</b> Un analista de Blue Team sospecha que un atacante podr√≠a estar usando DNS Tunneling para exfiltrar datos. ¬øEn qu√© tipo de logs deber√≠a enfocarse para buscar esta actividad?", "answer": ["dns"] },
  "p16": { "title": "P16: Forense de Memoria - Volatility", "theory": "La <b>forense de memoria RAM</b> es el an√°lisis de un volcado de la memoria de un sistema. Es crucial porque muchos malwares operan 'sin archivo' (fileless), existiendo solo en la memoria. La herramienta <b>Volatility</b> es el est√°ndar para analizar estos volcados, permitiendo extraer listas de procesos, conexiones de red activas en el momento de la captura, claves de registro cargadas e incluso contrase√±as en texto plano.", "practice": "<b>Pr√°ctica:</b> Con Volatility, ¬øqu√© plugin usar√≠as para ver las conexiones de red que estaban activas cuando se tom√≥ el volcado de memoria?", "answer": ["netscan"] },
  "p17": { "title": "P17: Web - Insecure Direct Object References (IDOR)", "theory": "<b>IDOR</b> es una vulnerabilidad de control de acceso que ocurre cuando una aplicaci√≥n expone una referencia directa a un objeto interno (como un ID de usuario o de archivo en la URL) y no verifica si el usuario que realiza la petici√≥n tiene permiso para acceder a ese objeto. Por ejemplo, si al ver tu perfil la URL es `.../profile?id=123`, un atacante podr√≠a cambiarla a `.../profile?id=124` para ver el perfil de otro usuario.", "practice": "<b>Pr√°ctica:</b> Para prevenir una vulnerabilidad IDOR, ¬øqu√© tipo de verificaci√≥n debe realizar siempre el servidor antes de mostrar o modificar un objeto?", "answer": [["control", "acceso"], "autorizacion"] },
  "p18": { "title": "P18: Contenedores - Docker Security", "theory": "La <b>seguridad de contenedores Docker</b> es un campo emergente. Una mala pr√°ctica com√∫n es ejecutar contenedores con el usuario <b>root</b>. Si un atacante compromete una aplicaci√≥n dentro del contenedor, operar√° como root dentro de √©l. Si adem√°s el contenedor est√° mal configurado o hay una vulnerabilidad en Docker, podr√≠a escapar del contenedor y comprometer el sistema anfitri√≥n.", "practice": "<b>Pr√°ctica:</b> ¬øCu√°l es el principio de seguridad que se viola al ejecutar un proceso dentro de un contenedor como usuario 'root'?", "answer": [["minimo", "privilegio"]] },
  "p19": { "title": "P19: Criptoan√°lisis", "theory": "El <b>Criptoan√°lisis</b> es el estudio de c√≥mo romper sistemas criptogr√°ficos. Un tipo de ataque fundamental es el <b>an√°lisis de frecuencias</b>, que se usa contra cifrados de sustituci√≥n simples (como el Cifrado C√©sar). Se basa en que ciertos caracteres (como la 'E' en ingl√©s o espa√±ol) aparecen con mucha m√°s frecuencia que otros. Al contar la frecuencia de los caracteres en el texto cifrado, se pueden hacer suposiciones sobre la clave.", "practice": "<b>Pr√°ctica:</b> ¬øContra qu√© tipo de cifrado es m√°s efectivo el an√°lisis de frecuencias?", "answer": ["sustitucion"] },
  "p20": { "title": "P20: Ataques de Contrase√±a - Spraying", "theory": "El <b>Password Spraying</b> es un tipo de ataque de fuerza bruta que invierte la l√≥gica. En lugar de probar muchas contrase√±as para un solo usuario, el atacante prueba una o dos contrase√±as muy comunes (ej: 'Invierno2024!') contra una gran lista de nombres de usuario. Este m√©todo es lento pero muy sigiloso, ya que evita los bloqueos de cuenta que se activan por m√∫ltiples intentos fallidos en un solo usuario.", "practice": "<b>Pr√°ctica:</b> ¬øCu√°l es el principal objetivo de un ataque de Password Spraying para evitar ser detectado?", "answer": [["evitar", "bloqueo"]] },
  "p21": { "title": "P21: Golden Ticket Attack", "theory": "Un ataque de <b>Golden Ticket</b> es una t√©cnica de post-explotaci√≥n en Active Directory. Un atacante que ha comprometido el hash de la cuenta <b>KRBTGT</b> (la cuenta de servicio del Key Distribution Center) puede forjar Tickets de Concesi√≥n de Tickets (TGTs) para cualquier usuario, con cualquier privilegio y con un tiempo de vida indefinido. Es el ataque de persistencia y escalada de privilegios definitivo en un entorno AD.", "practice": "<b>Pr√°ctica:</b> ¬øEl hash de qu√© cuenta es necesario comprometer para poder crear un Golden Ticket?", "answer": ["krbtgt"] },
  "p22": { "title": "P22: WebSockets Security", "theory": "Los <b>WebSockets</b> permiten una comunicaci√≥n bidireccional y persistente entre cliente y servidor. Las vulnerabilidades comunes incluyen <b>Cross-Site WebSocket Hijacking (CSWSH)</b>, donde un sitio malicioso puede iniciar una conexi√≥n WebSocket a un sitio vulnerable en nombre de la v√≠ctima, y la falta de cifrado (usar <code>ws://</code> en lugar de <code>wss://</code>).", "practice": "<b>Pr√°ctica:</b> Si una comunicaci√≥n WebSocket no est√° cifrada, ¬øqu√© protocolo se est√° utilizando?", "answer": ["ws"] },
  "p23": { "title": "P23: DevSecOps", "theory": "<b>DevSecOps</b> es una filosof√≠a que integra la seguridad en cada fase del ciclo de vida del desarrollo de software (DevOps). En lugar de que la seguridad sea un control final, se automatiza y se incluye desde el principio ('shifting left'). Herramientas de <b>SAST</b> (An√°lisis Est√°tico) y <b>DAST</b> (An√°lisis Din√°mico) se integran en los pipelines de CI/CD para encontrar vulnerabilidades antes del despliegue.", "practice": "<b>Pr√°ctica:</b> ¬øC√≥mo se llama la pr√°ctica de integrar la seguridad desde las primeras fases del desarrollo de software?", "answer": [["shift", "left"]] },
  "p24": { "title": "P24: Evasi√≥n de Defensas - API Hooking", "theory": "El <b>API Hooking</b> es una t√©cnica avanzada usada por malware (y antivirus) para interceptar llamadas a funciones. El malware puede 'enganchar' (hook) funciones del sistema operativo (como las que escriben archivos o se comunican por red) para modificar su comportamiento, ocultar su actividad o robar datos antes de que sean cifrados. Es una t√©cnica de evasi√≥n muy potente.", "practice": "<b>Pr√°ctica:</b> Si un keylogger quiere capturar las contrase√±as que escribes en cualquier aplicaci√≥n, ¬øqu√© tipo de funciones del sistema operativo es m√°s probable que intercepte (hook)?", "answer": [["entrada", "teclado"], ["keyboard", "input"]] },
  "p25": { "title": "P25: Ataques a Cadenas de Suministro (Supply Chain)", "theory": "Un <b>ataque a la cadena de suministro</b> no se dirige directamente a la organizaci√≥n objetivo, sino a uno de sus proveedores de software o hardware. El atacante compromete al proveedor e introduce c√≥digo malicioso en una actualizaci√≥n de software leg√≠tima. Cuando la organizaci√≥n objetivo instala la actualizaci√≥n, se infecta. El ataque a SolarWinds es el ejemplo m√°s famoso.", "practice": "<b>Pr√°ctica:</b> Si un atacante modifica una librer√≠a popular en GitHub para que incluya malware, y miles de proyectos que usan esa librer√≠a se ven comprometidos, ¬øqu√© tipo de ataque ha realizado?", "answer": [["cadena", "suministro"], ["supply", "chain"]] },
  "p26": { "title": "P26: Hardening de Kernel Linux", "theory": "Asegurar el <b>kernel</b> es la base de la seguridad en Linux. T√©cnicas como <b>ASLR (Address Space Layout Randomization)</b>, que aleatoriza las direcciones de memoria, y el uso de m√≥dulos de seguridad como <b>SELinux</b> o <b>AppArmor</b>, que aplican pol√≠ticas de control de acceso mandatorio (MAC), hacen que la explotaci√≥n de vulnerabilidades a nivel de kernel sea mucho m√°s dif√≠cil.", "practice": "<b>Pr√°ctica:</b> ¬øQu√© t√©cnica de mitigaci√≥n de exploits dificulta que un atacante conozca la direcci√≥n de memoria de una funci√≥n que quiere llamar en una ROP chain?", "answer": ["aslr"] },
  "p27": { "title": "P27: Respuesta a Incidentes - IR Playbooks", "theory": "Un <b>Playbook de Respuesta a Incidentes (IR)</b> es un conjunto de pasos predefinidos y estandarizados que una organizaci√≥n debe seguir cuando se detecta un incidente de seguridad (ej. un brote de ransomware). Tener playbooks para diferentes escenarios permite una respuesta r√°pida, coordinada y eficaz, minimizando el tiempo de inactividad y el impacto del ataque.", "practice": "<b>Pr√°ctica:</b> En la respuesta a un incidente de ransomware, ¬øcu√°l es el primer paso inmediato despu√©s de detectar la infecci√≥n para evitar que se propague m√°s?", "answer": ["aislar", "contener", "desconectar"] },
  "p28": { "title": "P28: Exploit Dev - Heap Spraying", "theory": "El <b>Heap Spraying</b> es una t√©cnica usada en la explotaci√≥n de vulnerabilidades, a menudo en navegadores. Consiste en llenar una gran parte del 'heap' (un √°rea de memoria para datos din√°micos) con m√∫ltiples copias del shellcode del atacante. Esto aumenta enormemente la probabilidad de que cuando la vulnerabilidad se active y corrompa un puntero para que apunte a una ubicaci√≥n predecible en el heap, aterrice en el shellcode.", "practice": "<b>Pr√°ctica:</b> ¬øEn qu√© regi√≥n de la memoria de un proceso se enfoca la t√©cnica de Heap Spraying?", "answer": ["heap"] },
  "p29": { "title": "P29: Honeypots", "theory": "Un <b>Honeypot</b> es un sistema se√±uelo dise√±ado para ser atacado. Se configura para parecer un sistema real y vulnerable (ej. un servidor web, una base de datos) para atraer a los atacantes. Su objetivo es distraer a los atacantes de los sistemas reales y, lo m√°s importante, permitir a los defensores estudiar sus TTPs (T√°cticas, T√©cnicas y Procedimientos) en un entorno controlado.", "practice": "<b>Pr√°ctica:</b> ¬øCu√°l es el prop√≥sito principal de un honeypot: proteger datos o estudiar al atacante?", "answer": ["estudiar al atacante"] },
  "p30": { "title": "P30: Desaf√≠o Pro Final II", "theory": "Este es el desaf√≠o definitivo. Combina OSINT, explotaci√≥n web, movimiento lateral y criptograf√≠a. Cada paso revela una pista para el siguiente. Debes actuar como un verdadero pentester profesional.", "practice": "<b>Pr√°ctica:</b> En el subdominio `internal-api.megacorpone.com` (encontrado previamente) hay un endpoint vulnerable a SSRF en `?url=`. √ösalo para acceder a los metadatos de la instancia cloud y obtener el token de sesi√≥n. El token est√° codificado en Base64 dos veces. Decodif√≠calo. Responde con la palabra final.", "answer": ["dominacion"] }
}

BASE_CONTENT_HUB = create_full_content_hub()

# ========= Base de Datos =========
def get_db():
    if not os.path.exists(DB_FILE):
        return {
            "users": {}, "keys": {}, "content": BASE_CONTENT_HUB, "course_structure": BASE_COURSE_STRUCTURE,
            "stats": {"total_users": 0, "active_vip": 0, "commands": {}},
            "bot_state": {"maintenance_mode": False},
            "daily_ctf": {"practice": "No hay CTF activo.", "answer": [], "solvers": [], "date": ""}
        }
    try:
        with open(DB_FILE, 'r', encoding='utf-8') as f:
            db = json.load(f)
            db.setdefault('users', {}); db.setdefault('keys', {})
            db.setdefault('content', BASE_CONTENT_HUB); db.setdefault('course_structure', BASE_COURSE_STRUCTURE)
            db.setdefault('stats', {'total_users': 0, 'active_vip': 0, 'commands': {}})
            db.setdefault('bot_state', {'maintenance_mode': False})
            db.setdefault('daily_ctf', {"practice": "No hay CTF activo.", "answer": [], "solvers": [], "date": ""})
            return db
    except (json.JSONDecodeError, FileNotFoundError):
        logger.error("Error al leer la base de datos.")
        return {}

def save_db(data):
    with open(DB_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def is_lesson_free(lesson_id):
    return lesson_id in ["b1", "b2", "b3"]

def get_user_data(user_id):
    db = get_db()
    user_id_str = str(user_id)
    user = db.get("users", {}).get(user_id_str)
    if not user: return None
    user.setdefault('progress', {level: [] for level in db.get('course_structure', {})})
    user.setdefault('points', 0)
    user.setdefault('last_seen', datetime.now().isoformat())
    return user

def check_flexible_answer(user_answer: str, correct_answers: list) -> bool:
    normalized_user_answer = user_answer.lower().strip()
    if not correct_answers: return False
    if isinstance(correct_answers[0], list):
        for and_group in correct_answers:
            if all(keyword.lower() in normalized_user_answer for keyword in and_group): return True
        return False
    else:
        for keyword in correct_answers:
            if keyword.lower() in normalized_user_answer: return True
        return False

# ========= Decoradores =========
def check_maintenance(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        db = get_db()
        if db.get("bot_state", {}).get("maintenance_mode", False) and update.effective_user.id != ADMIN_ID:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message: await message.reply_text(MAINTENANCE_MESSAGE, reply_markup=None)
            return
        return await func(update, context, *args, **kwargs)
    return wrapper

def log_command_usage(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        command_name = func.__name__.replace("_command", "").replace("_start", "")
        db = get_db()
        if db:
            db["stats"]["commands"][command_name] = db["stats"]["commands"].get(command_name, 0) + 1
            save_db(db)
        return await func(update, context, *args, **kwargs)
    return wrapper

def admin_only(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.effective_user.id != ADMIN_ID:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message: await message.reply_text("üö´ Acceso denegado. Solo admin.")
            return
        return await func(update, context, *args, **kwargs)
    return wrapper

# ========= L√≥gica de Comandos y Men√∫s Separada =========
async def _display_start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    welcome_msg = (f"¬°Hola, <b>{update.effective_user.first_name}</b>! üëã\n\n"
                   f"Bienvenido a <b>CyberHub Academy v53.0</b>.")
    keyboard = [
        [InlineKeyboardButton("üéì Iniciar Formaci√≥n", callback_data="menu:course")],
        [InlineKeyboardButton("üèÜ Leaderboard", callback_data="menu:leaderboard"), InlineKeyboardButton("üî• CTF Diario", callback_data="menu:daily_ctf")],
        [InlineKeyboardButton("üõ†Ô∏è Arsenal de Herramientas", callback_data="menu:tools")],
        [InlineKeyboardButton("‚≠ê Planes VIP", callback_data="menu:vip"), InlineKeyboardButton("üë§ Mi Perfil", callback_data="menu:profile")],
        [InlineKeyboardButton("üîë Canjear Clave", callback_data="menu:redeem")],
        [InlineKeyboardButton("üìù Feedback", callback_data="menu:feedback"), InlineKeyboardButton("üîÑ Lecci√≥n Random", callback_data="menu:random")]
    ]
    if hasattr(update, 'callback_query') and update.callback_query:
        await message.edit_text(welcome_msg, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    else:
        await message.reply_html(welcome_msg, reply_markup=InlineKeyboardMarkup(keyboard))

async def _display_profile(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id_to_show: int):
    message = update.message or update.callback_query.message
    user_data = get_user_data(user_id_to_show)
    if not user_data: return await message.reply_text("‚ùå Usuario no encontrado.")
    db = get_db()
    all_user_ids_sorted = [u_id for u_id, u_data in sorted(db.get('users', {}).items(), key=lambda item: item[1].get('points', 0), reverse=True) if u_data.get('points', 0) > 0 and not u_data.get('banned')]
    try:
        rank = all_user_ids_sorted.index(str(user_id_to_show)) + 1
        rank_str = f"#{rank}"
    except ValueError: rank_str = "Sin Ranking"
    completed_practices = sum(len(p) for p in user_data.get('progress', {}).values())
    text = (f"üë§ <b>Perfil de @{user_data.get('username', 'N/A')}</b>\n"
            f"üÜî <code>{user_id_to_show}</code>\n\n"
            f"üèÜ <b>Puntos:</b> {user_data.get('points', 0)}\n"
            f"üåç <b>Ranking Global:</b> {rank_str}\n"
            f"‚úîÔ∏è <b>Pr√°cticas Resueltas:</b> {completed_practices}")
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô Volver", callback_data="menu:main")]])
    if hasattr(update, 'callback_query') and update.callback_query:
        await message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=kb)
    else: await message.reply_html(text)

async def _display_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    db = get_db()
    valid_users = {uid: data for uid, data in db.get('users', {}).items() if data.get('points', 0) > 0 and not data.get('banned', False)}
    text = "üèÜ <b>Leaderboard Global</b>\n\n"
    if not valid_users:
        text += "A√∫n no hay nadie en el leaderboard. ¬°S√© el primero!"
    else:
        sorted_users = sorted(valid_users.items(), key=lambda item: item[1]['points'], reverse=True)
        medals = ["ü•á", "ü•à", "ü•â"]
        for i, (user_id, user_data) in enumerate(sorted_users[:LEADERBOARD_SIZE]):
            rank = medals[i] if i < 3 else f"<b>#{i+1}</b>"
            username = user_data.get('username', f'Usuario_{user_id[-4:]}')
            points = user_data.get('points', 0)
            text += f"{rank} @{username} - {points} puntos\n"
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô Volver", callback_data="menu:main")]])
    if hasattr(update, 'callback_query') and update.callback_query: await message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=kb)
    else: await message.reply_html(text, reply_markup=kb)

async def _display_daily_ctf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    db = get_db()
    ctf = db.get('daily_ctf', {})
    user_id_str = str(update.effective_user.id)
    today_str = datetime.now().strftime("%Y-%m-%d")
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô Volver", callback_data="menu:main")]])
    text = ""
    if ctf.get('date') != today_str or ctf.get('practice') == "No hay CTF activo.":
        text = "ü§î El CTF de hoy a√∫n no ha sido publicado. ¬°Vuelve m√°s tarde!"
    elif user_id_str in ctf.get('solvers', []):
        text = "¬°Felicidades! Ya resolviste el CTF de hoy. Vuelve ma√±ana para un nuevo reto."
    else:
        text = f"üî• <b>CTF del D√≠a ({today_str})</b>\n\n<b>Reto:</b>\n{ctf['practice']}\n\n"
        text += "Env√≠a tu respuesta con el comando <code>/solve [tu_respuesta]</code>"
    
    if hasattr(update, 'callback_query') and update.callback_query:
        await message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=kb)
    else:
        await message.reply_html(text, reply_markup=kb)

async def _display_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    db = get_db()
    stats = db.get("stats", {})
    maint_status = "ON üü¢" if db.get("bot_state", {}).get("maintenance_mode") else "OFF üî¥"
    text = (f"‚öôÔ∏è <b>Panel de Administraci√≥n</b> ‚öôÔ∏è\n\n"
            f"üë• <b>Usuarios:</b> {stats.get('total_users', 0)}\n"
            f"‚≠ê <b>VIPs Activos:</b> {stats.get('active_vip', 0)}\n"
            f"üõ†Ô∏è <b>Mantenimiento:</b> {maint_status}")
    keyboard = [[InlineKeyboardButton("üîë Generar Claves", callback_data="admin:genkey")],
                [InlineKeyboardButton("üë§ Gestionar Usuario", callback_data="admin:manage_user")],
                [InlineKeyboardButton("üì¢ Broadcast", callback_data="admin:broadcast")],
                [InlineKeyboardButton("‚ûï A√±adir Lecci√≥n", callback_data="admin:add_lesson")],
                [InlineKeyboardButton("üî• Poner CTF Diario", callback_data="admin:set_ctf")],
                [InlineKeyboardButton("üìä Estad√≠sticas", callback_data="admin:botstats")],
                [InlineKeyboardButton("Toggle Mantenimiento", callback_data="admin:maintenance")]]
    if hasattr(update, 'callback_query') and update.callback_query:
        await message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    else:
        await message.reply_html(text, reply_markup=InlineKeyboardMarkup(keyboard))

# ========= Comandos de Usuario (Wrappers) =========
@check_maintenance
@log_command_usage
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db = get_db()
    user_id_str = str(user.id)
    if user_id_str not in db.get("users", {}):
        db["users"][user_id_str] = {"username": user.username or user.first_name, "join_date": datetime.now().strftime("%Y-%m-%d"), "progress": {level: [] for level in db.get('course_structure', {})}, "vip": False, "vip_expiry": None, "banned": False, "points": 0, "last_seen": datetime.now().isoformat()}
        db["stats"]["total_users"] = db["stats"].get("total_users", 0) + 1
    else:
        db["users"][user_id_str]['last_seen'] = datetime.now().isoformat()
        db["users"][user_id_str].setdefault('points', 0)
    save_db(db)
    message = update.message or update.callback_query.message
    if db["users"][user_id_str].get("banned", False):
        await message.reply_text("üö´ Est√°s baneado.")
        return
    await _display_start_menu(update, context)

@check_maintenance
@log_command_usage
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ("‚ÑπÔ∏è <b>Comandos Disponibles</b>\n\n"
            "<b>Generales:</b>\n"
            "/start, /help, /profile, /redeem, /leaderboard, /daily_ctf, /solve, /feedback, /random\n\n"
            "<b>Herramientas Gratuitas:</b>\n"
            "/base64, /hash\n\n"
            "<b>Herramientas VIP üîí:</b>\n"
            "/url, /dns, /cve, /whois, /subdomains, /httpheaders, /portscan, /jwt_decode\n\n"
            "Para mas ayuda escribe a @alvarito_y")
    if update.effective_user.id == ADMIN_ID:
        text += ("\n\n<b>Admin:</b>\n"
                 "/admin, /key, /maintenance, /botstats, /add_lesson, /set_ctf")
    await update.message.reply_html(text)

@check_maintenance
@log_command_usage
async def redeem_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args: return await update.message.reply_html("<b>Uso:</b> <code>/redeem TU-CLAVE-AQUI</code>")
    key = context.args[0].strip().upper()
    db = get_db()
    if key not in db.get("keys", {}): return await update.message.reply_text("‚ùå La clave no existe.")
    key_data = db["keys"][key]
    if key_data.get("used", False): return await update.message.reply_text("‚ö†Ô∏è Esta clave ya fue canjeada.")
    user_data = db["users"][str(user_id)]
    days = key_data["days"]
    is_new_vip = not (user_data.get("vip") and "9999" not in (user_data.get("vip_expiry") or ""))
    if days >= 9000: new_expiry = datetime(9999, 12, 31)
    elif user_data.get("vip") and user_data.get("vip_expiry") and "9999" not in (user_data.get("vip_expiry") or ""):
        try:
            current_expiry = datetime.strptime(user_data["vip_expiry"], "%Y-%m-%d %H:%M:%S")
            new_expiry = current_expiry + timedelta(days=days)
        except (ValueError, TypeError): new_expiry = datetime.now() + timedelta(days=days)
    else: new_expiry = datetime.now() + timedelta(days=days)
    if is_new_vip: db["stats"]["active_vip"] = db["stats"].get("active_vip", 0) + 1
    user_data["vip"] = True
    user_data["vip_expiry"] = new_expiry.strftime("%Y-%m-%d %H:%M:%S")
    key_data["used"] = True; key_data["used_by"] = str(user_id); key_data["used_date"] = datetime.now().strftime("%Y-%m-%d")
    save_db(db)
    expiry_text = "para siempre (Vitalicio)" if days >= 9000 else f"hasta el <b>{new_expiry.strftime('%d/%m/%Y')}</b>"
    await update.message.reply_html(f"üéâ ¬°Felicidades! Has activado tu acceso VIP {expiry_text}.")

@check_maintenance
@log_command_usage
async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _display_profile(update, context, update.effective_user.id)

@check_maintenance
@log_command_usage
async def leaderboard_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _display_leaderboard(update, context)

@check_maintenance
@log_command_usage
async def daily_ctf_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _display_daily_ctf(update, context)

@check_maintenance
@log_command_usage
async def solve_ctf_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args: return await update.message.reply_html("<b>Uso:</b> <code>/solve [respuesta]</code>")
    user_answer, user_id_str, db, ctf = " ".join(context.args), str(update.effective_user.id), get_db(), db.get('daily_ctf', {})
    if ctf.get('date') != datetime.now().strftime("%Y-%m-%d"): return await update.message.reply_text("El CTF de hoy ya no est√° activo.")
    if user_id_str in ctf.get('solvers', []): return await update.message.reply_text("Ya has resuelto el CTF de hoy.")
    if check_flexible_answer(user_answer, ctf.get('answer', [])):
        db['users'][user_id_str]['points'] = db['users'][user_id_str].get('points', 0) + POINTS_PER_CTF
        db['daily_ctf']['solvers'].append(user_id_str)
        save_db(db)
        await update.message.reply_html(f"üèÜ ¬°Correcto! Has resuelto el CTF y ganado <b>{POINTS_PER_CTF} puntos</b>.")
    else: await update.message.reply_html("‚ùå Respuesta incorrecta. ¬°Sigue intentando!")

@check_maintenance
@log_command_usage
async def feedback_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    await message.edit_text("Escribe tu feedback para el administrador @alvarito_y. Env√≠a /cancel para anular.", reply_markup=None)
    return AWAITING_FEEDBACK

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message_to_admin = (f"üìù <b>Nuevo Feedback</b> üìù\n\n"
                        f"<b>De:</b> @{user.username} (ID: <code>{user.id}</code>)\n"
                        f"<b>Mensaje:</b>\n{update.message.text}")
    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=message_to_admin, parse_mode=ParseMode.HTML)
        await update.message.reply_text("‚úÖ ¬°Gracias! Tu feedback ha sido enviado.")
    except Exception as e:
        logger.error(f"No se pudo enviar feedback al admin: {e}")
        await update.message.reply_text("‚ùå Hubo un error al enviar tu feedback.")
    await start_command(update, context)
    return ConversationHandler.END

async def cancel_conversation_generic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data: context.user_data.clear()
    message = update.message or (hasattr(update, 'callback_query') and update.callback_query.message)
    await message.reply_text("Operaci√≥n cancelada.")
    if update.effective_user.id == ADMIN_ID:
        await _display_admin_panel(update, context)
    else:
        await _display_start_menu(update, context)
    return ConversationHandler.END

@check_maintenance
@log_command_usage
async def base64_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2: return await update.message.reply_html("<b>Uso:</b> <code>/base64 [enc|dec] [texto]</code>")
    mode, text = context.args[0].lower(), " ".join(context.args[1:])
    try:
        if mode in ["enc", "encode"]: result = base64.b64encode(text.encode('utf-8')).decode('utf-8')
        elif mode in ["dec", "decode"]: result = base64.b64decode(text.encode('utf-8')).decode('utf-8')
        else: return await update.message.reply_html("Modo inv√°lido. Usa 'enc' o 'dec'.")
        await update.message.reply_html(f"<b>Resultado:</b>\n<pre>{result}</pre>")
    except Exception as e: await update.message.reply_html(f"‚ùå Error: {e}")

@check_maintenance
@log_command_usage
async def hash_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args: return await update.message.reply_html("<b>Uso:</b> <code>/hash [texto]</code>")
    text_to_hash = " ".join(context.args).encode('utf-8')
    md5, sha1, sha256 = hashlib.md5(text_to_hash).hexdigest(), hashlib.sha1(text_to_hash).hexdigest(), hashlib.sha256(text_to_hash).hexdigest()
    await update.message.reply_html(f"<b>Hashes para:</b> <code>{' '.join(context.args)}</code>\n\n"
                                    f"<b>MD5:</b> <code>{md5}</code>\n<b>SHA1:</b> <code>{sha1}</code>\n<b>SHA256:</b> <code>{sha256}</code>")

@check_maintenance
@log_command_usage
async def url_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not get_user_data(update.effective_user.id).get("vip"): return await update.message.reply_html("üîí Herramienta exclusiva para <b>miembros VIP</b>.")
    if len(context.args) < 2: return await update.message.reply_html("<b>Uso:</b> <code>/url [enc|dec] [texto]</code>")
    mode, text = context.args[0].lower(), " ".join(context.args[1:])
    try:
        if mode in ["enc", "encode"]: result = urllib.parse.quote(text)
        elif mode in ["dec", "decode"]: result = urllib.parse.unquote(text)
        else: return await update.message.reply_html("Modo inv√°lido. Usa 'enc' o 'dec'.")
        await update.message.reply_html(f"<b>Resultado:</b>\n<code>{result}</code>")
    except Exception as e: await update.message.reply_html(f"‚ùå Error: {e}")

@check_maintenance
@log_command_usage
async def dns_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not get_user_data(update.effective_user.id).get("vip"): return await update.message.reply_html("üîí Herramienta exclusiva para <b>miembros VIP</b>.")
    if len(context.args) != 2: return await update.message.reply_html("<b>Uso:</b> <code>/dns [a|mx|txt] [dominio]</code>")
    q_type, domain = context.args[0].upper(), context.args[1]
    if q_type not in ["A", "MX", "TXT"]: return await update.message.reply_html("Tipo de registro inv√°lido. Usa 'a', 'mx' o 'txt'.")
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        answers = dns.resolver.resolve(domain, q_type)
        results = [str(rdata) for rdata in answers]
        if not results: await update.message.reply_text(f"No se encontraron registros {q_type} para {domain}.")
        else: await update.message.reply_html(f"<b>Registros {q_type} para {domain}:</b>\n\n" + "\n".join([f"<code>{res}</code>" for res in results]))
    except Exception as e: await update.message.reply_text(f"‚ùå Error al consultar DNS: {e}")

@check_maintenance
@log_command_usage
async def cve_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not get_user_data(update.effective_user.id).get("vip"): return await update.message.reply_html("üîí Herramienta exclusiva para <b>miembros VIP</b>.")
    if not context.args: return await update.message.reply_html("<b>Uso:</b> <code>/cve CVE-XXXX-XXXXX</code>")
    cve_id = context.args[0].upper()
    if not re.match(r'^CVE-\d{4}-\d{4,}$', cve_id): return await update.message.reply_html("Formato de CVE inv√°lido.")
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        response = requests.get(f"https://vulners.com/api/v3/search/id/?id[]={cve_id}", timeout=10)
        response.raise_for_status()
        data = response.json()
        if data.get("result") == "OK" and data["data"]["documents"]:
            doc = data["data"]["documents"][cve_id]
            score = doc.get("cvss", {}).get("score", "N/A")
            description = doc.get('description', 'No disponible.').replace('<', '&lt;').replace('>', '&gt;')
            text = (f"üìÑ <b>{doc.get('id')} - {doc.get('title')}</b>\n\n<b>Puntuaci√≥n CVSS:</b> {score}\n"
                    f"<b>Publicado:</b> {doc.get('published')}\n\n<b>Descripci√≥n:</b>\n{description}")
            await update.message.reply_html(text[:4096])
        else: await update.message.reply_html(f"No se encontr√≥ informaci√≥n para <code>{cve_id}</code>.")
    except Exception as e: await update.message.reply_html(f"‚ùå Error al consultar la API: {e}")

@check_maintenance
@log_command_usage
async def whois_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not get_user_data(update.effective_user.id).get("vip"): return await update.message.reply_html("üîí Herramienta exclusiva para <b>miembros VIP</b>.")
    if not context.args: return await update.message.reply_html("<b>Uso:</b> <code>/whois dominio.com</code>")
    domain = context.args[0].strip().lower()
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        r = requests.get(f"https://rdap.org/domain/{domain}", timeout=12)
        r.raise_for_status()
        data = r.json()
        registrar = next((e['vcardArray'][1][1][3] for e in data.get("entities", []) if 'registrar' in e.get('roles', [])), "N/D")
        status, name_servers = data.get("status", []), [ns.get("ldhName") for ns in data.get("nameservers", [])]
        events = data.get("events", [])
        created = next((e.get("eventDate") for e in events if e.get("eventAction") == "registration"), "N/D")
        expires = next((e.get("eventDate") for e in events if e.get("eventAction") == "expiration"), "N/D")
        text = (f"üìÑ <b>WHOIS / RDAP para {domain}</b>\n\n"
                f"‚Ä¢ <b>Registrar:</b> {registrar}\n‚Ä¢ <b>Creado:</b> {created}\n‚Ä¢ <b>Expira:</b> {expires}\n"
                f"‚Ä¢ <b>Status:</b> {', '.join(status)}\n‚Ä¢ <b>NS:</b> {', '.join(name_servers)}")
        await update.message.reply_html(text[:4096])
    except Exception as e: await update.message.reply_html(f"‚ùå Error WHOIS/RDAP: {e}")

@check_maintenance
@log_command_usage
async def subdomains_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not get_user_data(update.effective_user.id).get("vip"): return await update.message.reply_html("üîí Herramienta exclusiva para <b>miembros VIP</b>.")
    if not context.args: return await update.message.reply_html("<b>Uso:</b> <code>/subdomains dominio.com</code>")
    domain = context.args[0].strip().lower()
    await update.message.reply_text(f"Buscando subdominios para <code>{domain}</code> (puede tardar)...", parse_mode=ParseMode.HTML)
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        response = requests.get(f"https://crt.sh/?q=%.{domain}&output=json", timeout=25)
        response.raise_for_status()
        subdomains = sorted(list(set(entry['name_value'] for entry in response.json() if '*' not in entry['name_value'])))
        if subdomains:
            file_path = f"subdominios_{domain}.txt"
            with open(file_path, "w") as f: f.write("\n".join(subdomains))
            await update.message.reply_document(open(file_path, 'rb'), caption=f"üìÑ Se encontraron <b>{len(subdomains)}</b> subdominios para <b>{domain}</b>.", parse_mode=ParseMode.HTML)
            os.remove(file_path)
        else: await update.message.reply_text("No se encontraron subdominios v√≠a Certificate Transparency.")
    except Exception as e: await update.message.reply_text(f"‚ùå Error al buscar subdominios: {e}")

@check_maintenance
@log_command_usage
async def httpheaders_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not get_user_data(update.effective_user.id).get("vip"): return await update.message.reply_html("üîí Herramienta exclusiva para <b>miembros VIP</b>.")
    if not context.args: return await update.message.reply_html("<b>Uso:</b> <code>/httpheaders dominio.com</code>")
    domain = context.args[0].strip().lower()
    url = f"https://{domain}" if not domain.startswith("http") else domain
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        response = requests.get(url, timeout=10, allow_redirects=True, headers={'User-Agent': 'CyberHubBot/1.0'})
        text = f"üìÑ <b>Cabeceras HTTP para {domain}</b>\n\n"
        for key, value in response.headers.items(): text += f"<b>{key}:</b> <code>{value}</code>\n"
        await update.message.reply_html(text[:4096])
    except Exception as e: await update.message.reply_html(f"‚ùå Error al obtener cabeceras: {e}")

@check_maintenance
@log_command_usage
async def portscan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not get_user_data(update.effective_user.id).get("vip"): return await update.message.reply_html("üîí Herramienta exclusiva para <b>miembros VIP</b>.")
    if not context.args: return await update.message.reply_html("<b>Uso:</b> <code>/portscan [ip_o_dominio]</code>")
    target = context.args[0].strip()
    await update.message.reply_text(f"üîé Escaneando puertos comunes en <code>{target}</code>...", parse_mode=ParseMode.HTML)
    try:
        ip, open_ports = socket.gethostbyname(target), []
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        for port in COMMON_PORTS:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(0.5)
                if sock.connect_ex((ip, port)) == 0: open_ports.append(port)
        if open_ports: text = f"üü¢ <b>Puertos Abiertos en {target} ({ip}):</b>\n" + ", ".join([f"<code>{p}</code>" for p in open_ports])
        else: text = f"üî¥ No se encontraron puertos abiertos comunes en <b>{target} ({ip})</b>."
        await update.message.reply_html(text)
    except Exception as e: await update.message.reply_html(f"‚ùå Error durante el escaneo: {e}")

@check_maintenance
@log_command_usage
async def jwt_decode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not get_user_data(update.effective_user.id).get("vip"): return await update.message.reply_html("üîí Herramienta exclusiva para <b>miembros VIP</b>.")
    if not context.args: return await update.message.reply_html("<b>Uso:</b> <code>/jwt_decode [token]</code>")
    token = context.args[0]
    parts = token.split('.')
    if len(parts) != 3: return await update.message.reply_html("‚ùå Token JWT inv√°lido. Debe tener 3 partes separadas por puntos.")
    try:
        header = json.dumps(json.loads(base64.urlsafe_b64decode(parts[0] + '==').decode('utf-8')), indent=2)
        payload = json.dumps(json.loads(base64.urlsafe_b64decode(parts[1] + '==').decode('utf-8')), indent=2)
        text = (f"üìÑ <b>Token JWT Decodificado</b>\n\n<b>Header:</b>\n<pre>{header}</pre>\n\n"
                f"<b>Payload:</b>\n<pre>{payload}</pre>\n\n<i>Nota: La firma no ha sido verificada.</i>")
        await update.message.reply_html(text)
    except Exception as e: await update.message.reply_html(f"‚ùå Error al decodificar el token: {e}")

@check_maintenance
@log_command_usage
async def random_lesson_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    db, content = get_db(), db.get('content', {})
    if not content: return await message.reply_text("No hay lecciones disponibles.")
    random_lesson_id = random.choice(list(content.keys()))
    random_lesson = content[random_lesson_id]
    text = (f"üîÑ <b>Lecci√≥n Aleatoria</b> üîÑ\n\n<b>{random_lesson['title']}</b>\n\n"
            f"<b>Teor√≠a:</b>\n{random_lesson['theory']}\n\n"
            f"<i>Para practicar, b√∫scala en la secci√≥n de formaci√≥n.</i>")
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô Volver", callback_data="menu:main")]]) if hasattr(update, 'callback_query') else None
    if hasattr(update, 'callback_query'): await message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=kb)
    else: await message.reply_html(text)

@log_command_usage
@admin_only
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _display_admin_panel(update, context)

@log_command_usage
@admin_only
async def key_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2: return await update.message.reply_html("<b>Uso:</b> <code>/key [plan] [cantidad]</code>\n<b>Planes:</b> semanal, mensual, trimestral, vitalicio")
    plan, qty_str = context.args[0].lower(), context.args[1]
    try: qty = int(qty_str)
    except (ValueError, IndexError): return await update.message.reply_html("La cantidad debe ser un n√∫mero.")
    if plan not in VIP_PLANS: return await update.message.reply_html("Plan inv√°lido.")
    db, days, created = get_db(), VIP_PLANS[plan]['days'], []
    for _ in range(qty):
        key = 'CH-' + ''.join(random.choices('ABCDEFGHJKLMNPQRSTUVWXYZ23456789', k=16))
        db['keys'][key] = {"days": days, "used": False, "created": datetime.now().strftime("%Y-%m-%d")}
        created.append(key)
    save_db(db)
    text = f"üîë <b>Claves generadas</b> ({plan}, {qty}):\n" + "\n".join([f"<code>{k}</code>" for k in created])
    await update.message.reply_html(text[:4096])

@log_command_usage
@admin_only
async def maintenance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or context.args[0].lower() not in ['on', 'off']: return await update.message.reply_html("<b>Uso:</b> <code>/maintenance [on|off]</code>")
    db = get_db()
    db['bot_state']['maintenance_mode'] = (context.args[0].lower() == 'on')
    save_db(db)
    status = "ACTIVADO" if db['bot_state']['maintenance_mode'] else "DESACTIVADO"
    await update.message.reply_html(f"‚úÖ Modo mantenimiento <b>{status}</b>.")

@log_command_usage
@admin_only
async def botstats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _display_botstats(update, context)

async def _display_botstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    db, stats = get_db(), db.get('stats', {})
    command_stats, sorted_commands = stats.get('commands', {}), sorted(command_stats.items(), key=lambda item: item[1], reverse=True)
    text = (f"ü§ñ <b>Estad√≠sticas del Bot</b> ü§ñ\n\n"
            f"üë• <b>Usuarios Totales:</b> {stats.get('total_users', 0)}\n"
            f"‚≠ê <b>VIPs Activos:</b> {stats.get('active_vip', 0)}\n\n"
            "<b>Uso de Comandos:</b>\n" + ("\n".join([f"  ‚Ä¢ <code>/{c}</code>: {v} veces" for c, v in sorted_commands[:10]]) or "  No hay datos."))
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô Volver", callback_data="admin:panel")]]) if hasattr(update, 'callback_query') else None
    if hasattr(update, 'callback_query'): await message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=kb)
    else: await message.reply_html(text)

@log_command_usage
@admin_only
async def add_lesson_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    await message.edit_text("Iniciando adici√≥n de lecci√≥n.\nNivel (basico, medio, pro). /cancel para anular.")
    return ADD_LESSON_LEVEL

async def receive_lesson_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    level = update.message.text.lower()
    if level not in ["basico", "medio", "pro"]: return await update.message.reply_text("Nivel inv√°lido. Elige 'basico', 'medio' o 'pro'.")
    context.user_data['new_lesson'] = {'level': level}
    await update.message.reply_text(f"Nivel '{level}' OK. Ahora, ID de la lecci√≥n (ej: b31).")
    return ADD_LESSON_ID

async def receive_lesson_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lesson_id = update.message.text.lower()
    if lesson_id in get_db()['content']: return await update.message.reply_text("Ese ID ya existe. Elige otro.")
    context.user_data['new_lesson']['id'] = lesson_id
    await update.message.reply_text(f"ID '{lesson_id}' OK. T√≠tulo de la lecci√≥n.")
    return ADD_LESSON_TITLE

async def receive_lesson_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_lesson']['title'] = update.message.text
    await update.message.reply_text("T√≠tulo OK. Texto de la teor√≠a (HTML permitido).")
    return ADD_LESSON_THEORY

async def receive_lesson_theory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_lesson']['theory'] = update.message.text
    await update.message.reply_text("Teor√≠a OK. Texto de la pr√°ctica (HTML permitido).")
    return ADD_LESSON_PRACTICE

async def receive_lesson_practice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_lesson']['practice'] = update.message.text
    await update.message.reply_text("Pr√°ctica OK. Palabras clave de la respuesta (separadas por comas).")
    return ADD_LESSON_ANSWER

async def receive_lesson_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answers = [ans.strip().lower() for ans in update.message.text.split(',')]
    lesson_data = context.user_data['new_lesson']
    new_content = {"title": lesson_data['title'], "theory": lesson_data['theory'], "practice": lesson_data['practice'], "answer": answers}
    db = get_db()
    db['content'][lesson_data['id']] = new_content
    db['course_structure'][lesson_data['level']]['lessons'].append(lesson_data['id'])
    save_db(db)
    await update.message.reply_text(f"‚úÖ ¬°Lecci√≥n '{lesson_data['id']}' a√±adida al nivel '{lesson_data['level']}'!")
    context.user_data.clear()
    await _display_admin_panel(update, context)
    return ConversationHandler.END

@log_command_usage
@admin_only
async def set_ctf_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    await message.edit_text("Introduce el texto del reto para el CTF de hoy (HTML permitido). /cancel para anular.")
    return SET_CTF_PRACTICE

async def receive_ctf_practice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['ctf_practice'] = update.message.text
    await update.message.reply_text("Reto guardado. Ahora introduce las palabras clave de la respuesta (separadas por coma).")
    return SET_CTF_ANSWER

async def receive_ctf_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answers = [ans.strip().lower() for ans in update.message.text.split(',')]
    practice = context.user_data['ctf_practice']
    db = get_db()
    db['daily_ctf'] = {"practice": practice, "answer": answers, "solvers": [], "date": datetime.now().strftime("%Y-%m-%d")}
    save_db(db)
    await update.message.reply_text("‚úÖ CTF del d√≠a configurado.")
    context.user_data.clear()
    await _display_admin_panel(update, context)
    return ConversationHandler.END

@log_command_usage
@admin_only
async def broadcast_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    await message.edit_text("üì¢ Escribe el mensaje para el broadcast (admite HTML). /cancel para anular.", reply_markup=None)
    return RECEIVE_BROADCAST_MESSAGE

async def receive_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text_html
    db = get_db()
    all_users = [uid for uid, udata in db["users"].items() if not udata.get("banned")]
    await update.message.reply_text(f"‚è≥ Enviando mensaje a {len(all_users)} usuarios...")
    sent_count, failed_count = 0, 0
    for user_id in all_users:
        try:
            await context.bot.send_message(chat_id=user_id, text=message_text, parse_mode=ParseMode.HTML)
            sent_count += 1; await asyncio.sleep(0.1)
        except Exception as e:
            failed_count += 1; logger.error(f"Broadcast fallido a {user_id}: {e}")
    await update.message.reply_text(f"‚úÖ Broadcast completado!\nEnviado a: {sent_count}\nFallaron: {failed_count}")
    await _display_admin_panel(update, context)
    return ConversationHandler.END

@log_command_usage
@admin_only
async def manage_user_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    await message.edit_text("üë§ Env√≠a el ID num√©rico del usuario a gestionar. /cancel para anular.")
    return RECEIVE_USER_ID

async def receive_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = int(update.message.text)
        if not get_user_data(user_id):
            await update.message.reply_text("‚ùå Usuario no encontrado. Intenta con otro ID.")
            return RECEIVE_USER_ID
        await show_user_management_panel(update, context, user_id)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå ID inv√°lido. Env√≠a un ID num√©rico.")
        return RECEIVE_USER_ID

async def show_user_management_panel(update: Update, context: ContextTypes.DEFAULT_TYPE, managed_user_id: int):
    user_data = get_user_data(managed_user_id)
    message = update.message or update.callback_query.message
    status_text = "‚ùå INACTIVO"
    if user_data.get("vip"):
        expiry = user_data.get('vip_expiry', '')
        if "9999" in expiry: status_text = "‚úÖ ACTIVO (Vitalicio)"
        else: status_text = f"‚úÖ ACTIVO (Expira: {datetime.strptime(expiry, '%Y-%m-%d %H:%M:%S').strftime('%d/%m/%Y')})"
    
    ban_status = "S√≠ üö´" if user_data.get("banned") else "No ‚úÖ"
    text = (f"üë§ <b>Gestionando a @{user_data.get('username', 'N/A')}</b> (ID: <code>{managed_user_id}</code>)\n\n"
            f"<b>VIP:</b> {status_text}\n<b>Baneado:</b> {ban_status}")
    keyboard = [[InlineKeyboardButton("‚≠ê Dar/Quitar VIP (30d)", callback_data=f"admin_action:vip:{managed_user_id}")],
                [InlineKeyboardButton("üö´ Banear/Desbanear", callback_data=f"admin_action:ban:{managed_user_id}")],
                [InlineKeyboardButton("üîô Volver al Panel", callback_data="admin:panel")]]
    if hasattr(update, 'callback_query'): await message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    else: await message.reply_html(text, reply_markup=InlineKeyboardMarkup(keyboard))

# --- Manejador de Botones Central ---
@check_maintenance
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id, data = query.from_user.id, query.data
    parts = data.split(':')
    command = parts[0]
    
    user_data = get_user_data(user_id)
    if not user_data: return await query.message.edit_text("‚ùå Error al cargar tus datos. Usa /start.")
    is_admin = user_id == ADMIN_ID

    if command == 'menu':
        sub_command = parts[1]
        if sub_command == 'main': await start_command(update, context)
        elif sub_command == 'course':
            db = get_db()
            course_structure, course_order = db.get('course_structure', {}), ["basico", "medio", "pro"]
            text = "üéì <b>Ruta de Formaci√≥n</b>\nCompleta los m√≥dulos en orden.\n\n"
            keyboard, previous_module_completed = [], True
            for i, module_id in enumerate(course_order):
                module_info = course_structure.get(module_id, {})
                if not module_info: continue
                is_completed = all(l in user_data.get('progress', {}).get(module_id, []) for l in module_info['lessons'])
                unlocked = (i == 0) or previous_module_completed or is_admin
                status_icon = "‚úÖ" if is_completed else ("üü¢" if unlocked else "üîí")
                if unlocked: keyboard.append([InlineKeyboardButton(f"{status_icon} {module_info['name']}", callback_data=f"level:{module_id}:0")])
                else: keyboard.append([InlineKeyboardButton(f"{status_icon} {module_info['name']}", callback_data="noop")])
                if not is_completed and not is_admin: previous_module_completed = False
            text += "<i>Las 3 primeras lecciones son gratuitas. El resto requiere VIP.</i>"
            keyboard.append([InlineKeyboardButton("üîô Volver", callback_data="menu:main")])
            await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
        elif sub_command == 'leaderboard': await _display_leaderboard(update, context)
        elif sub_command == 'daily_ctf': await _display_daily_ctf(update, context)
        elif sub_command == 'random': await random_lesson_command(update, context)
        elif sub_command == 'profile': await _display_profile(update, context, user_id)
        elif sub_command == 'tools':
            text = ("<b>üõ†Ô∏è Arsenal</b>\nUsa estos comandos:\n\n"
                    "<b>GRATIS:</b>\n‚Ä¢ <code>/base64</code>, <code>/hash</code>\n\n"
                    "<b>VIP üîí:</b>\n‚Ä¢ <code>/url</code>, <code>/dns</code>, <code>/cve</code>, <code>/whois</code>, <code>/subdomains</code>, <code>/httpheaders</code>, <code>/portscan</code>, <code>/jwt_decode</code>")
            await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Volver", callback_data="menu:main")]]), parse_mode=ParseMode.HTML)
        elif sub_command == 'vip':
            status_text = "‚ùå <b>INACTIVO</b>"
            if user_data.get("vip") and user_data.get("vip_expiry"):
                expiry_date_str = user_data["vip_expiry"]
                if "9999" in expiry_date_str: status_text = "‚úÖ <b>ACTIVO (Vitalicio)</b>"
                else:
                    try:
                        expiry_date = datetime.strptime(expiry_date_str, "%Y-%m-%d %H:%M:%S")
                        status_text = f"‚úÖ <b>ACTIVO</b> (Expira: {expiry_date.strftime('%d/%m/%Y')})"
                    except (ValueError, TypeError): status_text = "‚ùå ESTADO INV√ÅLIDO"
            vip_text = f"‚≠ê <b>Membres√≠a VIP</b> ‚≠ê\n\nTu estado: {status_text}\n\n<b>Planes:</b>\n"
            for _, plan_info in VIP_PLANS.items(): vip_text += f"- <b>{plan_info['name']}</b>: ${plan_info['price']} USD\n"
            vip_text += f"\nContacta al admin para adquirir: üëâ <b>{ADMIN_USERNAME}</b> üëà"
            keyboard = [[InlineKeyboardButton("üîô Volver", callback_data="menu:main")]]
            await query.message.edit_text(vip_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
        elif sub_command == 'redeem':
            await query.message.edit_text("üîë Usa el comando en el chat:\n<code>/redeem TU-CLAVE-AQUI</code>", parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Volver", callback_data="menu:main")]]))
    
    elif command == 'level':
        db = get_db()
        content_hub, course_structure = db.get('content', {}), db.get('course_structure', {})
        level_id, page = parts[1], int(parts[2])
        level_info = course_structure.get(level_id, {})
        all_lessons = level_info.get('lessons', [])
        if not all_lessons: return await query.message.edit_text("M√≥dulo sin lecciones.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Volver", callback_data="menu:course")]]))
        total_pages = math.ceil(len(all_lessons) / PRACTICES_PER_PAGE)
        start_index, end_index = page * PRACTICES_PER_PAGE, (page + 1) * PRACTICES_PER_PAGE
        lessons_to_show = all_lessons[start_index:end_index]
        text = f"üìò <b>{level_info.get('name', '')}</b> (P√°g {page + 1}/{total_pages})\n\n"
        keyboard, user_progress = [], user_data.get('progress', {}).get(level_id, [])
        for i, lesson_id in enumerate(lessons_to_show):
            lesson_index_global = start_index + i
            content = content_hub.get(lesson_id, {})
            if not content: continue
            is_completed = lesson_id in user_progress
            is_unlocked = (lesson_index_global == 0) or (lesson_index_global > 0 and all_lessons[lesson_index_global - 1] in user_progress) or is_admin
            has_access = is_lesson_free(lesson_id) or user_data.get("vip", False) or is_admin
            status_icon = "‚úÖ" if is_completed else ("üü¢" if is_unlocked and has_access else "üîí")
            button_text = f"{status_icon} {content['title']}"
            if not has_access and is_unlocked: button_text += " (VIP)"
            if is_unlocked and has_access:
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"practice:{level_id}:{lesson_id}:{page}")])
            else:
                keyboard.append([InlineKeyboardButton(button_text, callback_data="noop_vip" if not has_access else "noop")])
        nav_buttons = []
        if page > 0: nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è Anterior", callback_data=f"level:{level_id}:{page-1}"))
        if end_index < len(all_lessons): nav_buttons.append(InlineKeyboardButton("Siguiente ‚û°Ô∏è", callback_data=f"level:{level_id}:{page+1}"))
        if nav_buttons: keyboard.append(nav_buttons)
        keyboard.append([InlineKeyboardButton("üîô Ruta", callback_data="menu:course")])
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)

    elif command == 'practice':
        db = get_db()
        content = db.get('content', {})
        level_id, lesson_id, page = parts[1], parts[2], int(parts[3])
        lesson = content.get(lesson_id)
        if not lesson: return await query.message.edit_text("‚ùå Lecci√≥n no encontrada.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Volver", callback_data=f"level:{level_id}:{page}")]]))
        context.user_data['current_practice'] = {'level_id': level_id, 'lesson_id': lesson_id, 'page': page}
        text = (f"üìó <b>{lesson['title']}</b>\n\n<b>Teor√≠a:</b>\n{lesson['theory']}\n\n{lesson['practice']}\n\n<i>Responde aqu√≠. /cancel para salir.</i>")
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô Volver", callback_data=f"level:{level_id}:{page}")]])
        await query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=kb)
        return AWAITING_PRACTICE_ANSWER
    
    elif command == 'admin':
        if not is_admin: return
        sub_command = parts[1]
        if sub_command == 'maintenance':
            db = get_db(); db['bot_state']['maintenance_mode'] = not db['bot_state'].get('maintenance_mode', False); save_db(db)
            await _display_admin_panel(update, context)
        elif sub_command == 'botstats': await _display_botstats(update, context)
        elif sub_command == 'panel': await _display_admin_panel(update, context)
        elif sub_command == 'genkey':
            plans_kb = [[InlineKeyboardButton(plan['name'], callback_data=f"admin:genkey_create:{plan_name}")] for plan_name, plan in VIP_PLANS.items()]
            plans_kb.append([InlineKeyboardButton("üîô Volver", callback_data="admin:panel")])
            await query.message.edit_text("Elige un plan para generar <b>1 clave</b>:", parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(plans_kb))
        elif sub_command == 'genkey_create':
            plan = parts[2]
            if plan not in VIP_PLANS: return
            db, key = get_db(), 'CH-' + ''.join(random.choices('ABCDEFGHJKLMNPQRSTUVWXYZ23456789', k=16))
            db['keys'][key] = {"days": VIP_PLANS[plan]['days'], "used": False, "created": datetime.now().strftime("%Y-%m-%d")}
            save_db(db)
            text = f"‚úÖ Clave generada ({plan}):\n\n<code>{key}</code>"
            kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚ûï Generar otra", callback_data="admin:genkey")], [InlineKeyboardButton("üîô Panel", callback_data="admin:panel")]])
            await query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=kb)
    
    elif command == 'admin_action':
        if not is_admin: return
        action, managed_user_id_str = parts[1], parts[2]
        managed_user_id = int(managed_user_id_str)
        db = get_db()
        managed_user_data = db['users'][managed_user_id_str]
        if action == 'vip':
            if managed_user_data.get("vip"): managed_user_data["vip"], managed_user_data["vip_expiry"] = False, None; await query.answer("‚úÖ VIP revocado.", show_alert=True)
            else:
                expiry = datetime.now() + timedelta(days=30)
                managed_user_data["vip"], managed_user_data["vip_expiry"] = True, expiry.strftime("%Y-%m-%d %H:%M:%S")
                await query.answer("‚úÖ VIP otorgado por 30 d√≠as.", show_alert=True)
        elif action == 'ban':
            managed_user_data["banned"] = not managed_user_data.get("banned", False)
            status = "Baneado" if managed_user_data["banned"] else "Desbaneado"
            await query.answer(f"‚úÖ Usuario {status}.", show_alert=True)
        save_db(db)
        await show_user_management_panel(update, context, managed_user_id)

    elif command == 'noop': await query.answer("üîí M√≥dulo o pr√°ctica bloqueada. Completa los anteriores.", show_alert=True)
    elif command == 'noop_vip': await query.answer("‚≠ê ¬°Contenido exclusivo para VIP!", show_alert=True)

# --- Manejador de Pr√°cticas ---
async def handle_practice_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text
    user_id_str = str(update.effective_user.id)
    practice_info = context.user_data.get('current_practice')
    if not practice_info: return ConversationHandler.END

    db = get_db()
    level_id, lesson_id = practice_info['level_id'], practice_info['lesson_id']
    content = db.get('content', {})
    correct_answer_keywords = content.get(lesson_id, {}).get('answer', [])
    
    if check_flexible_answer(user_answer, correct_answer_keywords):
        user_progress = db["users"][user_id_str].get('progress', {})
        level_progress = user_progress.setdefault(level_id, [])
        reply_text = "‚úÖ ¬°Correcto! "
        if lesson_id not in level_progress:
            level_progress.append(lesson_id)
            db["users"][user_id_str]['points'] = db["users"][user_id_str].get('points', 0) + POINTS_PER_PRACTICE
            reply_text += f"Has ganado <b>{POINTS_PER_PRACTICE} puntos</b>."
        else:
            reply_text += "Ya hab√≠as resuelto esta pr√°ctica."
        save_db(db)
        await update.message.reply_html(reply_text)
        
        all_lessons = db.get('course_structure', {}).get(level_id, {}).get('lessons', [])
        current_page = practice_info.get('page', 0)
        
        context.user_data.pop('current_practice', None)
        
        query_mock = type('Query', (), {'message': update.message, 'data': f'level:{level_id}:{current_page}', 'from_user': update.effective_user, 'answer': lambda show_alert=False: None})()
        update_mock = type('Update', (), {'callback_query': query_mock, 'message': update.message})
        await button_handler(update_mock, context)
        return ConversationHandler.END
    else:
        await update.message.reply_text("‚ùå Respuesta incorrecta. Vuelve a intentarlo. /cancel para salir.")
        return AWAITING_PRACTICE_ANSWER
        
# --- Funci√≥n Principal ---
def main():
    if not TOKEN:
        logger.critical("¬°Error Cr√≠tico! El TOKEN del bot no est√° configurado en el archivo configs.env")
        return
    if not ADMIN_ID:
        logger.warning("Advertencia: El ADMIN_ID no est√° configurado.")
    
    app = Application.builder().token(TOKEN).build()
    admin_filter = filters.User(user_id=ADMIN_ID)

    # --- Conversation Handlers ---
    feedback_handler = ConversationHandler(
        entry_points=[CommandHandler("feedback", feedback_start_command), CallbackQueryHandler(feedback_start_command, pattern='^menu:feedback$')],
        states={AWAITING_FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_feedback)]},
        fallbacks=[CommandHandler('cancel', cancel_conversation_generic)]
    )
    practice_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern='^practice:.*')],
        states={AWAITING_PRACTICE_ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_practice_answer)]},
        fallbacks=[CommandHandler('cancel', cancel_conversation_generic)]
    )
    add_lesson_handler = ConversationHandler(
        entry_points=[CommandHandler('add_lesson', add_lesson_start_command, filters=admin_filter), CallbackQueryHandler(add_lesson_start_command, pattern='^admin:add_lesson$')],
        states={
            ADD_LESSON_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_lesson_level)],
            ADD_LESSON_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_lesson_id)],
            ADD_LESSON_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_lesson_title)],
            ADD_LESSON_THEORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_lesson_theory)],
            ADD_LESSON_PRACTICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_lesson_practice)],
            ADD_LESSON_ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_lesson_answer)],
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation_generic)]
    )
    set_ctf_handler = ConversationHandler(
        entry_points=[CommandHandler('set_ctf', set_ctf_start_command, filters=admin_filter), CallbackQueryHandler(set_ctf_start_command, pattern='^admin:set_ctf$')],
        states={
            SET_CTF_PRACTICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_ctf_practice)],
            SET_CTF_ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_ctf_answer)],
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation_generic)]
    )
    manage_user_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(manage_user_start_command, pattern='^admin:manage_user$')],
        states={RECEIVE_USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_user_id)]},
        fallbacks=[CommandHandler('cancel', cancel_conversation_generic)]
    )
    broadcast_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(broadcast_start_command, pattern='^admin:broadcast$')],
        states={RECEIVE_BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_broadcast_message)]},
        fallbacks=[CommandHandler('cancel', cancel_conversation_generic)]
    )

    # --- Handlers ---
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("profile", profile_command))
    app.add_handler(CommandHandler("redeem", redeem_command))
    app.add_handler(CommandHandler("leaderboard", leaderboard_command))
    app.add_handler(CommandHandler("daily_ctf", daily_ctf_command))
    app.add_handler(CommandHandler("solve", solve_ctf_command))
    app.add_handler(CommandHandler("random", random_lesson_command))
    app.add_handler(CommandHandler("base64", base64_command))
    app.add_handler(CommandHandler("hash", hash_command))
    app.add_handler(CommandHandler("url", url_command))
    app.add_handler(CommandHandler("dns", dns_command))
    app.add_handler(CommandHandler("cve", cve_command))
    app.add_handler(CommandHandler("whois", whois_command))
    app.add_handler(CommandHandler("subdomains", subdomains_command))
    app.add_handler(CommandHandler("httpheaders", httpheaders_command))
    app.add_handler(CommandHandler("portscan", portscan_command))
    app.add_handler(CommandHandler("jwt_decode", jwt_decode_command))
    
    app.add_handler(CommandHandler("admin", admin_command, filters=admin_filter))
    app.add_handler(CommandHandler("key", key_command, filters=admin_filter))
    app.add_handler(CommandHandler("maintenance", maintenance_command, filters=admin_filter))
    app.add_handler(CommandHandler("botstats", botstats_command, filters=admin_filter))
    
    app.add_handler(feedback_handler)
    app.add_handler(practice_handler)
    app.add_handler(add_lesson_handler)
    app.add_handler(set_ctf_handler)
    app.add_handler(manage_user_handler)
    app.add_handler(broadcast_handler)
    
    app.add_handler(CallbackQueryHandler(button_handler))

    logger.info("Iniciando CyberHub Academy Bot v35.0 - Edici√≥n Monol√≠tica...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()